syntax = "proto3";

option go_package = "./pb";

package pb;

// 导入汇付宝rpc服务
import "rpc_admin_heepay.proto";
// 导入区块链admin rpc服务
import "rpc_admin_antchain.proto";

//--------------------------------账户--------------------------------
message User {
  int64 id = 1; //账号id
  string uuid = 2; //uuid
  int64 msId = 3; //msId
  int64 storeId = 4; //storeId
  string merchantName = 5; //商户全称
  string username = 6; //用户名
  string nickname = 7; //昵称
  string phone = 8; //手机号
  string password = 9; //密码
  string avatar = 10; //avatar
  string gender = 11; //gender
  int64 deptId = 12; //部门编号
  string deptName = 13; //deptName
  int64 shopId = 14; //门店id
  string shopName = 15; //shopName
  string roleId = 16; //多个值以逗号分割
  int64 userType = 17; //0前台用户,1系统管理人员
  int64 status = 18; //状态 1:enable, 0:disable, -1:deleted
  string referralCode = 19; //推荐码
  int64 createdAt = 20; //创建时间
  int64 updatedAt = 21; //updatedAt
  int64 lastLoginAt = 22; //最后一次登录时间
  string createIpAt = 23; //创建ip
  string lastLoginIpAt = 24; //最后一次登录ip
  int64 loginTimes = 25; //登录次数
  int64 parentId = 26; //parent_id
  string ancestors = 27; //ancestors
  int64 isMask = 28; //是否屏蔽
}

message LoginVerifyReq {
  string phone = 1; //手机号
  string password = 2; //密码
  string type = 3;
  string code = 4;
  int64 msId = 5;
}
message LoginVerifyResp{
  User user = 1;
}

message LoginReq {
  int64 uid = 1;
  int64 msId = 2;
  int64 storeId = 3;
}
message MoreLoginReq {
  repeated int64 uids = 1;
  int64 msId = 2;
}
message LoginResp {
  string accessToken = 1;
  int64 accessExpire = 2;
  int64 refreshAfter = 3;
}

message LoginV2Resp {
  string AccessToken = 1;
  int64 AccessExpire = 2;
  string RefreshToken = 3;
  int64 RefreshExpire = 4;
}

message RegisterReq {
  string phone = 1; //手机号
  string username = 2;
  string password = 3; //密码
  string rePassword = 4;
  string nickname = 5;
  string avatar = 6;
  string gender = 7;
  string type = 8;
  int64 status = 9;
  string CreateIp = 10;
  int64 msId = 11;
  int64 storeId = 12;
  int64 deptId = 13;
  string deptName = 14;
  int64 shopId = 15;
  string shopName = 16;
  string RoleId = 17; //多个值以逗号分割
  int64 parentId = 20; //parent_id
  string ancestors = 21; //ancestors
  int64 userId = 22;
  int64 userType = 23;
  string referralCode = 24; //推荐码
}
message RegisterResp {
  int64 userId = 1;
}

message GenerateTokenReq{
  int64 uid = 1;
  int64 MsId = 2;
  int64 storeId = 3;
}
message MoreGenerateTokenReq {
  repeated int64 uids = 1;
  int64 msId = 2;
}

message GenerateTokenResp{
  string AccessToken = 1;
  int64 AccessExpire = 2;
  int64 RefreshAfter = 3;
}

message GenerateTokenV2Resp{
  string AccessToken = 1;
  int64 AccessExpire = 2;
  string RefreshToken = 3;
  int64 RefreshExpire = 4;
}

message RefreshTokenReq{
  string refreshToken = 1;
}
message RefreshTokenResp{
  string accessToken = 1;
  int64 accessExpire = 2;
  int64 userId = 3;
}

message UserUpdateReq{
  int64 id = 1; //账号id
  string uuid = 2; //uuid
  string username = 3; //用户名
  string nickname = 4; //
  string phone = 5; //手机号
  string password = 6; //密码
  string avatar = 7;
  string gender = 8;
  int64 storeId = 9;
  int64 msId = 10;
  int64 deptId = 11;//部门编号
  string roleId = 12;
  int64 userType = 13; //1店铺用户 2部门用户 3系统管理
  int64 parentId = 14; // 上一级id
  string ancestors = 15; // 祖先ids

  int64 updatedAt = 16; //
  string merchantName = 17; //商户全称
  int64 lastLoginAt = 18; //最后一次登录时间
  string lastLoginIpAt = 19; //最后一次登录ip
  int64 loginTimes = 20; //登录次数
  int64 status = 21; //状态 1:enable, 0:disable, -1:deleted
  string updateType = 22; // 更新类型
  string referralCode = 23; //推荐码
}

message UserUpdateReferralCodeReq{
  int64 id = 1; //账号id
  int64 msId = 2;
  string referralCode = 3; //推荐码
}

message UserUpdateIsMaskReq{
  int64 id = 1; //账号id
  int64 msId = 2;
  int64 isMask = 3; //是否屏蔽
}

message UserPasswordReq {
  int64 uid = 1;
  string password = 2;
  string rePassword = 3;
}

message AddUserResp{
  int64 uid = 1;
}

message GetUserByIdReq {
  int64 id = 1; //id
  int64 msId = 2;
  int64 storeId = 3;
}
message GetUserByPhoneReq {
  string phone = 1; //phone
  int64 msId = 2;
  int64 storeId = 3;
}
message GetUserByUuidReq{
  string uuid = 1; //uuid
  int64 msId = 2;
}
message GetUserByReferralCodeReq{
  int64 msId = 1;
  string referralCode = 2; //referralCode
  int64 storeId = 3;
  int64 status = 4;
}
message GetUserResp {
  User user = 1; //user
}

message GetUserByStoreIdUserTypeReq{
  int64 msId = 1;
  int64 storeId = 2;
  int64 userType = 3;
}
message GetUserByAllReq{
  int64 msId = 1;
  int64 storeId = 2;
}
message UserGetByUserIdsReq{
  repeated int64 userId = 1;
  int64 storeId = 2;
}
message UserGetByUserTypeReq{
  repeated int64 userType = 1;
  int64 status = 2;
}
message GetUserByAllResp {
  repeated User list = 1; //user
  int64 total = 2;
}

//--------------------------------登录日志--------------------------------
message AdminUserLoginLog {
  int64 id = 1; //id
  int64 uid = 2; //uid
  int64 createAt = 3; //createAt
  string createIp = 4; //createIp
  string loginType = 5; //登录类型
  int64 msId = 6; //系统ID
}

message AddAdminUserLoginLogReq {
  int64 uid = 1; //uid
  int64 createAt = 2; //createAt
  string createIp = 3; //createIp
  string loginType = 4; //登录类型
  int64 msId = 5; //系统ID
}
message AdminUserLoginLogResp {
  int64 id = 1; //id
}

//----------------AuthUser--------------------//
message MenuTree{
  int64 id = 1;
  string menuName = 2;
  string menuDesc = 3;
  string menuUri = 4;
  string menuIcon = 5;
  string menuType = 6;//菜单类型 M目录，C菜单；F按钮
  int64 parentId = 7;
  repeated MenuTree children = 8;
}
message UserInfoReq{
  int64 uid = 1;
}
message UserInfoResp{
  int64 uid = 1;
  int64 storeId = 2;
  string username = 3;
  string nickname = 4;
  string avatar = 5;
  repeated MenuTree menuTree = 6;
  repeated string urlList = 7;
}

message AuthUserListReq{
  int64 page = 1;
  int64 size = 2;
  int64 msId = 3;
  int64 storeId = 4;
  int64 userType = 5;
  string params = 6;
  int64 status = 7;
}
message AuthUserListResp{
  repeated User users = 1;
  int64 total = 2;
}
message AuthAddUserReq {
  int64 msId = 1;
  string uuid = 2; //uuid
  string phone = 3; //手机号
  string username = 4; //用户名
  string nickname = 5;//昵称
  string password = 6; //密码
  int64 userType = 7;
  int64 status = 8;
  string gender = 9;
  string avatar = 10;

  string createIpAt = 14; //createIpAt
  int64 deptId = 15;//部门编号
  string roleId = 16;//角色列表
  string referralCode = 17; //推荐码
}

message AuthUpdateUserReq {

  int64 msId = 1;
  int64 id = 2; //id

  string username = 5;  //用户名
  string nickname = 6; //昵称
  string password = 7; //密码
  string avatar = 8;
  string gender = 9;

  int64 deptId = 10;//部门编号
  string deptName = 11;
  string roleId = 12;//角色列表
  int64 userType = 13;
  int64 status = 14;
}

message AuthUpdateUserAncestorsReq {
  int64 id = 1;
  int64 msId = 2;
  int64 parentId = 3;
  string ancestors = 4;
}
message AuthAddUserResp {
  int64 uid = 1;
}

message AuthSearchUserReq {
  int64 page = 1; //page
  int64 size = 2; //size
  repeated string keys = 3;
  repeated string values = 4;
}
message AuthSearchUserResp{
  repeated User users = 1;
}

//--------------------------------系统权限--------------------------------
message AuthItem {
  int64 id = 1; //id
  int64 msId = 2; //系统id
  string path = 3; //页面/接口uri
  int64 createAt = 4; //创建时间
  int64 createBy = 5; //staff_id
  int64 updateAt = 6; //更新时间
  int64 updateBy = 7; //staff_id
  int64 status = 8; //状态 1:enable, 0:disable, -1:deleted
}

message AddAuthItemReq {
  int64 msId = 1; //系统id
  string path = 2; //页面/接口uri
  int64 createAt = 3; //创建时间
  int64 createBy = 4; //staff_id
  int64 menuId = 5;//菜单编号
  int64 status = 7; //状态 1:enable, 0:disable, -1:deleted
}
message AddAuthItemResp {
  int64 id = 1;
}

message ListAuthItemReq {
  int64 page = 1; //page
  int64 size = 2; //size
  int64 msId = 3;
}
message ListAuthItemResp {
  repeated AuthItem authItems = 1; //authItem
  int64 total = 2;
}

message UpdateAuthItemReq {
  int64 id = 1; //id
  int64 msId = 2; //系统id
  string path = 3; //页面/接口uri
  int64 updateAt = 6; //更新时间
  int64 updateBy = 7; //staff_id
  int64 status = 8; //状态 1:enable, 0:disable, -1:deleted
}
message UpdateAuthItemResp {
  int64 id = 1;
}

message GetAuthItemByIdReq {
  int64 id = 1; //id
  int64 msId = 2;
}
message GetAuthItemByIdResp {
  AuthItem authItem = 1; //authItem
}
//--------------------------------系统menu--------------------------------
message AuthMsMenu {
  int64 id = 1; //id
  int64 msId = 2; //系统id
  int64 parentId = 3; //父菜单id
  string menuName = 4; //菜单名称
  string menuDesc = 5; //菜描述
  string path = 6; //菜单path
  string pathIds = 16;//多级路由路径编号，之间用","隔开
  string permission = 17;//权限标识符
  string menuIcon = 7; //菜单icon
  string menuType = 8;//菜单类型 M目录，C菜单；F按钮
  int64 isShow = 9; //是否展示菜单
  int64 createAt = 10; //创建时间
  int64 createBy = 11; //staff_id
  int64 updateAt = 12; //更新时间
  int64 status = 14; //状态 1:enable, 0:disable, -1:deleted
  int64 sort = 15; //排序
  repeated AuthMsMenu children = 18;
  string method = 19;//接口提交方式
  string api = 20;//接口url
}

message AddAuthMsMenuReq {
  int64 msId = 1; //系统id
  int64 parentId = 2; //父菜单id
  string menuName = 3; //菜单名称
  string menuDesc = 4; //菜描述
  string path = 5; //路径
  string pathIds = 6; //多级路由路径编号，之间用","隔开
  string component = 7;//控件路由
  string menuIcon = 8; //菜单icon
  string menuType = 9;//菜单类型 M目录，C菜单；F按钮
  int64 isShow = 10; //是否展示菜单
  int64 sort = 12; //排序
  int64 status = 13; //状态 1:enable, 0:disable, -1:deleted
  string permission = 14;//权限标识符
  string method = 15;//请求方法
  string api = 16;//api 接口地址
}
message AuthMsMenuResp {
  int64 id = 1; //id
}

message ListAuthMsMenuReq {
  int64 page = 1;
  int64 size = 2;
  int64 msId = 3;
  int64 storeId = 4;
  string params = 5;
}
message ListAuthMsMenuResp {
  repeated AuthMsMenu list = 1;
  int64 total = 2;
}

message UpdateAuthMsMenuReq {
  int64 id = 1; //id
  int64 msId = 2; //系统id
  int64 parentId = 3; //父菜单id
  string menuName = 4; //菜单名称
  string menuDesc = 5; //菜描述
  string path = 6; //菜单path
  string pathIds = 14; //多级路由路径编号，之间用","隔开
  string menuIcon = 7; //菜单icon
  string menuType = 8;//菜单类型 M目录，C菜单；F按钮
  int64 isShow = 9; //是否展示菜单
  int64 updateAt = 10; //更新时间
  int64 status = 12; //状态 1:enable, 0:disable, -1:deleted
  int64 sort = 13; //排序
  //  string permission = 15;//权限标识符
  string api = 16;//接口
  string method = 17;//接口提交方式
}

message GetAuthMsMenuByIdReq {
  int64 id = 1; //id
  int64 msId = 2;
}
message GetAuthMsMenuByIdResp {
  AuthMsMenu info = 1; //authMsMenu
}

//根据菜单编号获取列表
message GetAuthMenuByIdsReq {
  repeated int64 menuIds = 1;//菜单编号
  int64 msId = 2;
}
message GetAuthMenuByIdsReps {
  repeated AuthMsMenu list = 1; //authMsMenu
}

//--------------------------------部门--------------------------------
message AuthDept {
  int64 id = 1; //id
  int64 msId = 2; //系统id
  int64 parentId = 3; //父id
  string ancestors = 4; //祖先id
  string deptName = 5; //名称
  string deptDesc = 6; //描述
  string leader = 7; //负责人
  string phone = 8; //联系电话
  string email = 9; //联系邮箱
  int64 storeId = 10; //storeId
  int64 sort = 11; //sort
  int64 status = 12; //状态 1:enable, 0:disable, -1:deleted
  int64 updateBy = 13; //staff_id
  int64 createBy = 14; //staff_id
  int64 createAt = 15; //创建时间
  int64 updateAt = 16; //更新时间
}

message AddAuthDeptReq {
  int64 msId = 2; //系统id
  int64 parentId = 3; //父id
  string ancestors = 4; //祖先id
  string deptName = 5; //名称
  string deptDesc = 6; //描述
  string leader = 7; //负责人
  string phone = 8; //联系电话
  string email = 9; //联系邮箱
  int64 storeId = 10; //storeId
  int64 sort = 11; //sort
  int64 status = 12; //状态 1:enable, 0:disable, -1:deleted
  int64 createBy = 14; //staff_id
  int64 createAt = 15; //创建时间
}

message UpdateAuthDeptReq {
  int64 id = 1; //id
  int64 msId = 2; //系统id
  int64 parentId = 3; //父id
  string ancestors = 4; //祖先id
  string deptName = 5; //名称
  string deptDesc = 6; //描述
  string leader = 7; //负责人
  string phone = 8; //联系电话
  string email = 9; //联系邮箱
  int64 storeId = 10; //storeId
  int64 sort = 11; //sort
  int64 status = 12; //状态 1:enable, 0:disable, -1:deleted
  int64 updateBy = 13; //staff_id
  int64 updateAt = 16; //更新时间
}

message AuthDeptResp {
  int64 id = 1; //id
}

message ListAuthDeptReq {
  int64 page = 1; //page
  int64 size = 2; //size
  int64 msId = 3;
  string params = 4;//params
  int64 storeId = 5;
  int64 status = 6;
  //  int64 dept_id = 5;//部门编号
  //  int32 userType = 5;//用户类型
}
message ListAuthDeptResp {
  repeated AuthDept list = 1; //authDept
  int64 total = 2;
}

message GetAuthDeptByIdReq {
  int64 id = 1; //id
  int64 msId = 2;
}
message GetAuthDeptByIdResp {
  AuthDept info = 1; //authDept
}

//--------------------------------权限角色与员工关系--------------------------------

message StaffInfo {
  int64 id = 1; //员工id
  int64 uid = 2; //账号id
  int64 storeId = 3; //storeId
  int64 deptId = 4; //deptId
  string phone = 5; //员工手机号
  string username = 6; //员工姓名
  string nickname = 7; //员工昵称
  string avatar = 8; //员工头像(相对路径)
  string gender = 9; //员工性别
  int64 createAt = 10; //创建时间
  int64 updateAt = 11; //更新时间
  string referralCode = 12; //referralCode
}

message StaffInfoGetByUidReq{
  int64 userId = 1;
  int64 msId = 3;
}
message StaffInfoGetByUidAndStoreIdReq{
  int64 userId = 1;
  int64 storeId = 2;
  int64 msId = 3;
}
message StaffInfoResp{
  StaffInfo info = 1;
}

message StaffInfoListReq{
  int64 msId = 1;
  int64 page = 2; //page
  int64 size = 3;
  int64 storeId = 4;
  string params = 5;
}
message StaffInfoListResp{
  repeated StaffInfo list = 1;
  int64 total = 2;
}

//--------------------------------商户表--------------------------------
message Store {
  int64 id = 1; //id
  string storeCode = 2; //店铺标识
  string storeName = 3; //店铺名称
  string merchantName = 4; //公司全称
  string storeType = 5; //storeType
  string desc = 6; //描述
  string mcc = 7; //mcc
  string alipayUserId = 8; //支付宝商户id
  string authAppId = 9; //app_id
  string appAuthCode = 10; //appAuthCode
  string appAuthToken = 11; //appAuthToken
  string storeAddress = 12; //storeAddress
  string refreshToken = 13; //refreshToken
  int64 expireAt = 14; //失效时间
  int64 createAt = 15; //创建时间
  int64 createBy = 16; //创建者
  int64 updateAt = 17; //更新时间
  int64 updateBy = 18; //更新者
  int64 saleBy = 19; //销售
  string saleName = 20; //销售姓名
  string status = 21; //状态:new-新建,audit-待初审,pending-待进件,auditing-审核中,reject-审核拒绝,pass-已进件/审核通过,invalid-商户已废弃或不在合作
  int64 storeStatus = 22; //storeStatus
  string alipayResponse = 23; //alipayResponse
  string zftExternalId = 24; //zftExternalId
  string zftOrderId = 25; //zftOrderId
  string zftSmid = 26; //zftSmid
  string businessTime = 27; //businessTime
  string businessDate = 28; //businessDate
  string isSendMessage = 29; //0不发送 1发送
  string commerceStatus = 30; //安心付状态
  double commerceBalance = 31; //安心付余额：单位：元
  double offlineRate = 32; //线下收款费率：单位：百分比
  string settleAlipayLogonId = 33; //收单账号
  string notifyUrl = 34; //通知地址
  int64 isYusheng = 35; //0聚合 1独立
  int64 chargeNow = 36; //立即扣款0 1
}

message StoreUpdateDataReq{
  Store store = 1; // 商户数据
}
message StoreUpdateDataResp{}

//--------------------------------商户信息表--------------------------------
message StoreInfo {
  int64 id = 1; //id
  int64 storeId = 2; //店铺id
  string alipayAccount = 3; //支付宝账号
  string legalName = 4; //法人姓名
  string legalCartNo = 5; //法人身份证号
  string legalAddress = 6; //法人地址
  string licenceTitle = 7; //营业执照全称
  string licenceName = 8; //营业执照简称
  string licenceNo = 9; //营业执照编码
  string contactName = 10; //联系人
  string contactPhone = 11; //联系人手机号
  string province = 12; //省
  string provinceCode = 13;
  string city = 14; //市
  string cityCode = 15;
  string district = 16; //区
  string districtCode = 17;
  string detail = 18; //详细地址
  //  string businessDate = 20; //营业日期
  //  string businessTime = 21; //营业时间
  string kefuPhone = 22; //客服电话
  string receivePhone = 23; //接受信息电话
  string logoImages = 24; //logo图片
  string bannerImages = 25; //banner
  string erweimaImage = 26; //店铺二维码
  string licenceImage = 27; //营业执照
  string businessImage = 28; //行业资质
  //  string segementImage = 29; //分段协议照片
  string storeImages = 30; //店内照片
  string doorImage = 31; //门头照片
  string legalFrontImages = 32; //法人正面照片
  string legalReverseImages = 33; //法人反面照片
  string certificateStart = 34;
  string certificateEnd = 35;
  int64 createAt = 38; //创建时间
  int64 updateAt = 39; //更新时间
}

message AddStoreReq{

  string storeCode = 1; //店铺标识
  string storeName = 2; //店铺名称
  string storeAddress = 3;
  string desc = 4; // 描述
  string mcc = 5; // mcc
  string storeType = 6; //类型
  int64 expireAt = 9; //失效时间
  int64 createAt = 10; //创建时间
  int64 createBy = 11; //创建者
  int64 saleBy = 12; //销售
  string saleName = 13; //销售姓名
  string status = 14; //状态
  string commerceStatus = 15;
  string businessDate = 16;
  string businessTime = 17;
}

message UpdateStoreReq{
  int64 id = 1;
  string storeName = 2;
  string merchantName = 3; //公司全称
  string desc = 4;
  string storeType = 5;
  string storeAddress = 6;
  string mcc = 7;
  string businessDate = 8;
  string businessTime = 9;

  string alipayUserId = 10;
  string authAppId = 11;
  string appAuthCode = 12;
  string appAuthToken = 13;
  string refreshToken = 14;

  string alipayResponse = 16;
  string updateType = 17;
  string zftExternalId = 18;
  string zftOrderId = 19;
  string zftSmid = 20;

  int64 expireAt = 21;
  int64 updateBy = 22;
  int64 saleBy = 23;
  string saleName = 24; //销售姓名
  string status = 25;
  string isSendMessage = 26;
  int64 chargeNow = 27;
}

message UpdateStoreCommerceStatusReq{
  int64 id = 1;
  string commerceStatus = 2;
  string alipayResponse = 3;
  string settleAlipayLogonId = 4;
}

message StoreResp{
  int64 id = 1;
}

message ListStoreReq{
  int64 msId = 1;
  int64 page = 2; //page
  int64 size = 3; //size
  int64 storeId = 4;
  string status = 5;
  string params = 6;
}
message StoreGetByStoreIdsReq {
  repeated int64 storeId = 1;
}
message StoreGetByCommerceStatusReq {
  string commerceStatus = 1;
}
message ListStoreResp {
  repeated Store list = 1;
  int64 total = 2;
}
message QueryStoreByCommerceStatusReq{
  repeated string commerceStatus = 1;
}
message StoreGetByAllReq{
  int64 msId = 1;
}

message GetStoreByIdReq{
  int64 id = 1;
  string status = 2;
}
message GetStoreByStoreCodeReq{
  string storeCode = 1;
}
message GetStoreByAuthAppIdReq{
  string authAppId = 1;
}
message GetStoreByMerchantPidReq{
  string merchantPid = 1;
}
message GetStoreByExternalIdReq {
  string zftExternalId = 1;
}
message GetStoreByStoreNameReq{
  string storeName = 1;
}
message GetStoreResp{
  Store store = 1;
}

message UpdateStoreInfoReq{

  int64 storeId = 2; //店铺id
  string alipayAccount = 3; //支付宝账号
  string legalName = 4; //法人姓名
  string legalCartNo = 5; //法人身份证号
  string legalAddress = 6; //法人地址
  string licenceTitle = 7; //营业执照全称
  string licenceName = 8; //营业执照简称
  string licenceNo = 9; //营业执照编码
  string contactName = 10; //联系人
  string contactPhone = 11; //联系人手机号
  string province = 12; //省
  string provinceCode = 13;
  string city = 14; //市
  string cityCode = 15;
  string district = 16; //区
  string districtCode = 17;
  string detail = 18; //详细地址

  //  string businessDate = 19; //营业日期
  //  string businessTime = 20; //营业时间
  string kefuPhone = 21; //客服电话
  string receivePhone = 22; //接受信息电话
  string certificateStart = 23;
  string certificateEnd = 24;
  repeated string logoImages = 25; //logo图片
  repeated string bannerImages = 26; //banner
  string erweimaImage = 27; //店铺二维码
  string licenceImage = 28; //营业执照
  string businessImage = 29; //行业资质
  //  repeated string segementImage = 30; //分段协议照片
  repeated string storeImages = 31; //店内照片
  repeated string doorImage = 32; //门头照片
  string legalFrontImages = 33; //法人正面照片
  string legalReverseImages = 34; //法人反面照片
}
message UpdateStoreInfoResp{
  int64 id = 1;
}

message GetStoreInfoByNameReq{
  string storeName = 1;
}
message GetStoreInfoReq{
  int64 storeId = 1;
}
message GetStoreInfoResp{
  StoreInfo storeInfo = 1;
}

//message SearchStoreInfoReq{
//  int64 page = 1;
//  int64 size = 2;
//  int64 storeId = 3;
//  string keys = 4;
//  string values = 5;
//}
//message SearchStoreInfoResp{
//  repeated StoreInfo list = 1;
//  int64 total = 2;
//}

//------------------------前端店铺信息--------------------------------
message FrontStoreinfo{
  int64 id = 1;
  string storeCode = 2; //店铺id
  string storeName = 3; //店铺名称
  string desc = 4; //描述
  string storeAddress = 5;
  string alipayUserId = 6; //支付宝uid
  string authAppId = 7; //授权应用id
  string status = 8; //状态 1:enable, 0:disable, -1:deleted
  string province = 10; //省
  string city = 11; //市
  string district = 12; //县
  string detail = 13; //详细地址
  string businessDate = 14; //营业日期
  string businessTime = 15; //营业时间
  string kefuPhone = 16; //客服电话
  string receivePhone = 17; //接受信息电话
  string logoUrl = 18; //logo图片 多个图片逗号分隔
  string mainUrl = 19; //主图 多个图片逗号分隔
  string erweimaUrl = 20; //店铺二维码
  string mcc = 21;
  string appName = 23;
}

message FrontStoreinfoByIdReq{
  int64 id = 1;
}
//message FrontStoreinfoByAppIdReq{
//  string appId = 1;
//}
message FrontStoreinfoResp{
  FrontStoreinfo storeInfo = 1;
}

message FrontListByMccReq{
  int64 page = 1; //page
  int64 size = 2; //size
  string uuid = 3;
  string mcc = 4;
  int64 storeStatus = 5;
}
message FrontListByAppIdReq{
  int64 page = 1; //page
  int64 size = 2; //size
  string uuid = 3;
  string appId = 4;
}
message FrontListByAppIdResp{
  repeated FrontStoreinfo list = 1;
  int64 Total = 2;
}
//--------------------------------商户小程序表--------------------------------
message StoreApplet {
  int64 id = 1; //id
  int64 platform = 2; //平台:0-支付宝,1-微信
  int64 originalChannel = 3; //原始渠道(一旦创建不会更改):0-芝麻先享, 1-汇付宝/卡代扣,2-蚂蚁区块链,3-安心付
  int64 channel = 4; //标注小程序渠道:0-芝麻先享, 1-汇付宝/卡代扣,2-蚂蚁区块链,3-安心付
  int64 storeId = 5; //商户id
  string merchantUserId = 6; //平台下对应的-商户userID:支付宝对应store.alipay_user_id
  string appAuthCode = 7; //小程序授权码
  string appAuthToken = 8; //小程序授权token
  int64 heepayMerchantId = 9; //汇付宝/卡代扣商户id号: heepay_merchant_id(heepay_merchant.id)
  string storeName = 10; //店铺名称
  string appName = 11; //小程序名称
  string appEnglishName = 12; //小程序应用英文名称
  string appSlogan = 13; //小程序简介
  string appLogo = 14; //小程序logo图标
  string appBannerImages = 15; //小程序banner图,多张逗号隔开!
  string appDesc = 16; //小程序描述
  string miniCategoryIds = 17; //新小程序前台类目
  string icpSubjectType = 18; //主体单位性质
  string appId = 19; //小程序appid
  string orderNo = 20; //支付宝接口返回order_id
  string outOrderNo = 21; //外部订单号(out_order_no)
  int64 createStatus = 22; //创建状态:0-未授权,PROCESS-1,TIMEOUT-2,AGREED=3,REJECTED=4
  int64 icpStatus = 23; //备案状态:0-未备案,1-平台审核驳回,2-平台审核中,3-监管审核中,4-监管审核驳回,5-已备案
  string buildVersion = 24; //构建版本
  int64 buildAt = 25; //构建时间
  int64 buildStatus = 26; //构建状态:0-构建排队中,1-正在构建,2-构建成功,3-构建失败,5-构建超时,6-版本创建成功
  string auditVersion = 27; //提审版本
  int64 auditAt = 28; //提审时间
  int64 auditedAt = 29; //审核时间
  int64 auditStatus = 30; //审核状态:0-未审核,1-审核中,2-审核通过,3-审核驳回
  int64 firstAudit = 31; //是否是第一次提审:1-是,0-否
  string onlineVersion = 32; //上线版本
  int64 onlineAt = 33; //上线时间
  int64 onlineStatus = 34; //上线状态:0-待上架,1-已上架,2-已下架,3-已被强制下架
  int64 onlineRollback = 35; //上架是否回滚:1-是,0-否
  int64 createAt = 36; //创建时间
  int64 updateAt = 37; //更新时间
  int64 createBy = 38; //创建者
  int64 updateBy = 39; //更新者
  string alipayApiResponse = 40; //阿里接口响应信息
  string certifyId = 41; //人脸核验的凭证
  int64 icpCertifyTime = 42; //人脸核验发起的时间:23小时内不在重复发送
  string auditInfoList = 43; //小程序前置审批项信息
  string subjectAttachmentMaterials = 44; //小程序主体附件字段
  string appletAttachmentMaterials = 45; //小程序附件字段
  int64 needSign = 46; //是否需要签约:1-是,0-否
  int64 isJuhe = 47; //小程序本身作用类型:0-作为商户小程序使用,1-作为玙晟小程序使用(作为其他小程序的基础聚合小程序)
  string appIdInfo = 48; //小程序应用信息字段(OPEN_ID或USER_ID)
  int64 isYusheng = 49; //小程序使用类型:0-安心付聚合,1-安心付独立,2-区块链聚合,3-区块链独立,4-芝麻聚合,5-芝麻独立,6-汇付宝聚合,7-汇付宝独立
  int64 useStatus = 50; //小程序使用状态:0-未禁用,1-已禁用
}

message ListStoreAppletReq{
  int64 page = 2; //page
  int64 size = 3; //size
  int64 storeId = 4; //商户id
  int64 msId = 5;
  string params = 6;
  // 字段筛选
  //  string storeName = 7; //商户名称【模糊匹配】
  //  string appName = 8; //小程序名称【模糊匹配】
  //  int64 createStatus = 9; //授权状态 - -1表示全部【默认】：0-未授权,处理中-1,超时-2,同意=3,拒绝=4

}
message ListStoreAppletResp{
  repeated StoreApplet list = 1;
  int64 total = 2;
}

message QueryPlatformStoreAppletReq{
  int64 storeId = 1; //商户id
  int64 platform = 2; //平台:0-支付宝,1-微信
}
message QueryPlatformStoreAppletResp{
  repeated StoreApplet list = 1;
}

message AddStoreAppletReq{
  int64 platform = 1; //平台:0-支付宝,1-微信
  int64 originalChannel = 2; //标注小程序渠道
  int64 channel = 3; //标注小程序渠道
  int64 storeId = 4; //商户id
  int64 heepayMerchantId = 5; //支付宝商户id
  string storeName = 6; //商户名称 - 冗余字段
  string appName = 7; //小程序名称
  string miniCategoryIds = 8; //新小程序前台类目
  string icpSubjectType = 9; //主体单位性质
  int64 needSign = 10; //是否需要签约:1-是,0-否
  string appLogo = 11; //小程序logo图标
  int64 isJuhe = 12; // 小程序本身作用类型:0-作为商户小程序使用,1-作为玙晟小程序使用(作为其他小程序的基础聚合小程序)
  int64 isYuSheng = 13; // 小程序使用类型:0-安心付聚合,1-安心付独立,2-区块链聚合,3-区块链独立,4-芝麻聚合,5-芝麻独立,6-汇付宝聚合,7-汇付宝独立
}

message UpdateStoreAppletReq{
  StoreApplet storeApplet = 1;
}
message StoreAppletResp{
  int64 id = 1;
}

message GetStoreAppletReq{
  int64 id = 1; //id
}
message GetStoreAppletByStoreIdReq {
  int64 channel = 1; //标注小程序渠道
  int64 storeId = 2;
}
message GetStoreAppletByOutOrderNoReq{
  string outOrderNo = 1;
}

message StoreQueryAppletReq{
  int64 storeId = 1;
}
message StoreQueryAppletResp{
  int64 appletId = 1; //小程序id
}

message StoreChannelQueryAppletReq{
  int64 channel = 1; //标注小程序渠道
  int64 storeId = 2;
}
message StoreChannelQueryAppletResp{
  StoreApplet storeApplet = 1;
}


message QueryAppletByAppIdReq{
  string appId = 2; // 小程序appId
}
message QueryStoreAppletByStoreIdAndChannelReq{
  int64 storeId = 1; // 商户Id
  int64 channel = 2; // 渠道
}
message QueryAppletByAppIdResp{
  StoreApplet storeApplet = 1;
}

message QueryStoreAppletByOriginalChannelReq{
  int64 storeId = 1; // 商户Id
  int64 originalChannel = 2; // 原始渠道
}
message QueryStoreAppletByOriginalChannelResp{
  StoreApplet applet = 1; // 小程序
}

message QueryAllAppletByStoreIdReq{
  int64 storeId = 1;
}
message QueryAllAppletByStoreIdResp{
  repeated StoreApplet list = 1;
}
message QueryJuheAppletListReq{}
message QueryJuheAppletListResp{
  repeated StoreApplet list = 1;
}

message QueryAppletByMiniCategoryReq{
  string miniCategoryIds = 1;
  int64 channel = 2;
}
message QueryAppletByMiniCategoryResp{
  repeated StoreApplet list = 1;
}

message GetStoreAppletResp{
  StoreApplet storeApplet = 1;
}

message SearchStoreAppletReq{
  int64 page = 1;
  int64 size = 2;
  int64 storeId = 3;
  string keys = 4;
  string values = 5;
}
message SearchStoreAppletResp{
  repeated StoreApplet list = 1;
  int64 total = 2;
}

message GetMiniInfoReq{
  int64 storeId = 1;
}
message GetMiniInfoResp{

  string appId = 1;
  string appName = 2;
  string orderNo = 3;
  string outOrderNo = 4;

  string alipayAccount = 5;
  string legalName = 6;
  string legalCartNo = 7;
  string licenceTitle = 8;
  string licenceNo = 9;
  string contactName = 10;
  string contactPhone = 11;
  int64 storeAppletId = 12;
}

//--------------------------------店铺门店表--------------------------------
message StoreShop {
  int64 id = 1; //id
  string alipayStoreId = 2; //alipayStoreId
  int64 storeId = 3; //storeId
  string shopNo = 4; //shopNo
  string ipRoleId = 5; //ipRoleId
  string orderId = 6; //orderId
  string shopName = 7; //门店名称
  string shopType = 8; //门店类型: 1-总店 2-分店
  string provinceCode = 9; //省份编码
  string province = 10; //省份
  string cityCode = 11; //城市编码
  string city = 12; //城市
  string districtCode = 13; //区县编码
  string district = 14; //区县
  string address = 15; //门店地址
  string shopCategory = 16; //行业类目
  string mobile = 17; //门店电话
  string legalName = 18; //法人姓名
  string legalCertNo = 19; //法人身份证号
  string licenseAuthLetterImage = 20; //营业执照授权函图片id
  string certNo = 21; //证书编号
  string certType = 22; //证书类型
  string certName = 23; //证书名称
  string certImage = 24; //营业执照图片KEY
  string outDoorImages = 25; //门头照id
  string cover = 26; //门店封面图id
  string settleAlipayLogonId = 27; //结算支付宝账号
  string industryQualificationType = 28; //行业资质类型
  string industryQualificationImage = 29; //行业资质图片
  int64 createAt = 30; //创建时间
  int64 createBy = 31; //创建者
  int64 updateAt = 32; //更新时间
  int64 updateBy = 33; //更新者
  string status = 34; //status
  int64 settleType = 35; //0 1
  string alipayResponse = 36; //alipayResponse
  string logoImage = 37; //门店logo
  string businessDate = 38; //营业日期
  string businessTime = 39; //营业时间
  string juheQrcode = 40; //聚合二维码
  string duliQrcode = 41; //独立二维码
}

message AddStoreShopReq {

  int64 storeId = 2; //storeId
  string shopNo = 3; //shopNo
  string ipRoleId = 4; //ipRoleId
  string orderId = 5; //orderId
  string shopName = 6; //门店名称
  string shopType = 7; //门店类型: 1-总店 2-分店

  string provinceCode = 9; //省份编码
  string province = 10; //省份
  string cityCode = 11; //城市编码
  string city = 12; //城市
  string districtCode = 13; //区县编码
  string district = 14; //区县
  string address = 15; //门店地址
  string status = 16; //status

  string certNo = 20; //证书编号
  string certType = 21; //证书类型
  string certName = 22; //证书名称
  string certImage = 23; //营业执照图片KEY

  string shopCategory = 33; //行业类目
  string mobile = 34;
  string alipayStoreId = 35; //alipayStoreId
  string logoImage = 36; //门店logo
  string businessDate = 37; //营业日期
  string businessTime = 38; //营业时间
}
message AuditStoreShopReq {
  int64 id = 1; //id
  string shopNo = 2;
  string status = 3; //status
  string alipayResponse = 4; //alipayResponse
}
message UpdateStoreShopSettleTypeReq {
  int64 id = 1; //id
  int64 settleType = 2; //settleType 0 1 2 
  int64 updateBy = 3;
}

message UpdateStoreShopStatusReq{
  int64 id = 1; //id
  string orderId = 2; //orderId
  string shopNo = 3; //shopNo
  string status = 9; //status
  string alipayResponse = 10; //alipayResponse
}
message UpdateStoreShopReceiptAccountReq{
  int64 id = 1; //id
  string settleAlipayLogonId = 4; //结算支付宝账号
  string alipayResponse = 10; //alipayResponse
}
message UpdateStoreShopReq {
  int64 id = 1; //id
  string alipayStoreId = 2; //alipayStoreId
  int64 storeId = 3; //storeId
  string shopNo = 4; //shopNo
  string ipRoleId = 5; //ipRoleId
  string orderId = 6; //orderId
  string shopName = 7; //门店名称
  string shopType = 8; //门店类型: 1-总店 2-分店
  string provinceCode = 9; //省份编码
  string province = 10; //省份
  string cityCode = 11; //城市编码
  string city = 12; //城市
  string districtCode = 13; //区县编码
  string district = 14; //区县
  string address = 15; //门店地址
  string shopCategory = 16; //行业类目
  string legalName = 17; //法人姓名
  string legalCertNo = 18; //法人身份证号
  string licenseAuthLetterImage = 19; //营业执照授权函图片id
  string certNo = 20; //证书编号
  string certType = 21; //证书类型
  string certName = 22; //证书名称
  string certImage = 23; //营业执照图片KEY
  string outDoorImages = 24; //门头照id
  string cover = 25; //门店封面图id
  string settleAlipayLogonId = 26; //结算支付宝账号
  string status = 31; //status
  string alipayResponse = 32; //alipayResponse
  string mobile = 33; //门店电话
  string industryQualificationType = 34; //行业资质类型
  string industryQualificationImage = 35; //行业资质图片
  string logoImage = 36; //门店logo
  string businessDate = 37; //营业日期
  string businessTime = 38; //营业时间
  string juheQrcode = 39; //聚合二维码
  string duliQrcode = 40; //独立二维码
}
message StoreShopResp {
  int64 id = 1;
}

message GetStoreShopByIdReq {
  int64 id = 1; //id
}
message GetStoreShopByAlipayStoreIdReq{
  string alipayStoreId = 1;
}
message GetStoreShopByReceiptAccountReq{
  string settleAlipayLogonId = 1;
}
message GetStoreShopByOrderIdReq{
  string orderId = 1;
}
message GetStoreShopByShopNoReq{
  string shopNo = 1;
}
message GetStoreShopInfoResp {
  StoreShop info = 1; //storeShop
}
message QueryAllValidStoreShopReq{}
message QueryAllValidStoreShopResp{
  repeated StoreShop list = 1;
}

message GetStoreShopListReq {
  int64 page = 1;
  int64 size = 2;
  int64 shopId = 3;
  string Status = 4;
}
message GetStoreShopByStoreIdReq{
  int64 page = 1;
  int64 size = 2;
  int64 storeId = 3;
  string shopNo = 4;
  string status = 5;
}
message GetStoreShopByKeywordsReq{
  int64 page = 1;
  int64 size = 2;
  int64 storeId = 3;
  string keywords = 4;
  string status = 5;
}
message ListStoreShopReq{
  int64 page = 1;
  int64 size = 2;
  string params = 3;
}
message ListStoreShopResp{
  repeated StoreShop list = 1;
  int64 total = 2;
}

//--------------------------------商户门店地址表--------------------------------
message StoreShopAddress {
  int64 id = 1; //id
  int64 storeId = 2; //storeId
  string parentCode = 3; //parentCode
  string provinceCode = 4; //provinceCode
  string provinceName = 5; //provinceName
  string cityCode = 6; //cityCode
  string cityName = 7; //cityName
  string countyCode = 8; //countyCode
  string countyName = 9; //countyName
  string areaCode = 10; //areaCode
  string areaName = 11; //areaName
  string areaPinyin = 12; //areaPinyin
  int64 areaType = 13; //areaType
  string townCode = 14; //townCode
  string townName = 15; //townName
  int64 createAt = 16; //createAt
  int64 updateAt = 17; //updateAt
}

message AddStoreShopAddressReq {
  int64 storeId = 1; //storeId
  string parentCode = 2; //parentCode
  string provinceCode = 3; //provinceCode
  string provinceName = 4; //provinceName
  string cityCode = 5; //cityCode
  string cityName = 6; //cityName
  string countyCode = 7; //countyCode
  string countyName = 8; //countyName
  string areaCode = 9; //areaCode
  string areaName = 10; //areaName
  string areaPinyin = 11; //areaPinyin
  int64 areaType = 12; //areaType
  string townCode = 13; //townCode
  string townName = 14; //townName
}
message BulkAddStoreShopAddressReq {
  repeated StoreShopAddress list = 1;
  int64 total = 2;
}

message UpdateStoreShopAddressReq {
  int64 id = 1; //id
  int64 storeId = 2; //storeId
  string parentCode = 3; //parentCode
  string provinceCode = 4; //provinceCode
  string provinceName = 5; //provinceName
  string cityCode = 6; //cityCode
  string cityName = 7; //cityName
  string countyCode = 8; //countyCode
  string countyName = 9; //countyName
  string areaCode = 10; //areaCode
  string areaName = 11; //areaName
  string areaPinyin = 12; //areaPinyin
  int64 areaType = 13; //areaType
  string townCode = 14; //townCode
  string townName = 15; //townName
}
message StoreShopAddressResp {
  int64 id = 1;
}

message GetStoreShopAddressByIdReq {
  int64 id = 1; //id
}
message GetStoreShopAddressInfoResp {
  StoreShopAddress info = 1; //storeShopAddress
}
message ListStoreShopAddressReq{
  int64 page = 1;
  int64 size = 2;
  string params = 3;
}
message AllStoreShopAddressReq{

}
message GetStoreShopAddressListResp {
  repeated StoreShopAddress list = 1; //storeShopAddress
  int64 total = 2;
}

//--------------------------------商户门店分类表--------------------------------
message StoreShopCategory {
  int64 id = 1; //id
  int64 storeId = 2; //storeId
  string categoryId = 3; //categoryId
  int64 parentId = 4; //parentId
  string name = 5; //name
  int64 createAt = 6; //createAt
  int64 updateAt = 7; //updateAt
}

message AddStoreShopCategoryReq {
  int64 storeId = 1; //storeId
  string categoryId = 2; //categoryId
  int64 parentId = 3; //parentId
  string name = 4; //name
  int64 createAt = 5; //createAt
  int64 updateAt = 6; //updateAt
}
message UpdateStoreShopCategoryReq {
  int64 id = 1; //id
  int64 storeId = 2; //storeId
  string categoryId = 3; //categoryId
  int64 parentId = 4; //parentId
  string name = 5; //name
  int64 createAt = 6; //createAt
  int64 updateAt = 7; //updateAt
}
message BulkAddStoreShopCategoryReq{
  repeated StoreShopCategory list = 1;
  int64 total = 2;
}
message StoreShopCategoryResp {
  int64 id = 1;
}

message GetStoreShopCategoryByIdReq {
  int64 id = 1; //id
}
message GetStoreShopCategoryInfoResp {
  StoreShopCategory info = 1; //storeShopCategory
}
message ListStoreShopCategoryReq{
  int64 page = 1;
  int64 size = 2;
  string params = 3;
}
message AllStoreShopCategoryReq{

}
message GetStoreShopCategoryListResp{
  repeated StoreShopCategory list = 1; //storeShopCategory
  int64 total = 2;
}

//--------------------------------店铺结算配置表--------------------------------
message StoreSettle {
  int64 id = 1; //id
  int64 storeId = 2; //id
  string storeName = 3; //名称
  double serviceRate = 4; //服务费率
  string settleAccount = 5; //结算账号
  string realName = 6; //真实姓名
  double separateLedgerRate = 7; //分账比例
  int64 status = 8; //状态 0已删除 1正常
  int64 createAt = 9; //创建时间
  int64 updateAt = 10; //更新时间
  int64 createBy = 11; //创建人
  int64 updateBy = 12; //更新人
  string settleType = 13; //v1芝麻 v4安心付
}

message AddStoreSettleReq {
  int64 storeId = 1; //id
  string storeName = 2; //名称
  double serviceRate = 3; //服务费率
  string settleAccount = 4; //结算账号
  string realName = 5; //真实姓名
  double separateLedgerRate = 6; //分账比例
  int64 status = 7; //状态 0已删除 1正常
  string settleType = 8; //v1芝麻 v4安心付

}
message UpdateStoreSettleReq {
  int64 id = 1; //id
  int64 storeId = 2; //id
  string storeName = 3; //名称
  double serviceRate = 4; //服务费率
  string settleAccount = 5; //结算账号
  string realName = 6; //真实姓名
  double separateLedgerRate = 7; //分账比例
  int64 status = 8; //状态 0已删除 1正常
  string settleType = 9; //v1芝麻 v4安心付
}
message DelStoreSettleReq {
  int64 id = 1; //id
  int64 storeId = 2;
  string settleType = 3;
  int64 status = 4;
}

message StoreSettleResp {
  int64 id = 1;
}

message BulkStoreSettleReq{
  repeated StoreSettle info = 1;
  int64 storeId = 2;
  string storeName = 3;
  string settleType = 4;
}
message BulkStoreSettleResp{
  int64 id = 1;
}

message GetStoreSettleByIdReq {
  int64 id = 1; //id
}
message GetStoreSettleByIdResp {
  StoreSettle info = 1;
}

message GetStoreSettleByStoreIdReq {
  int64 storeId = 1;
  string settleType = 2;
  int64 status = 3;
}
message GetStoreSettleByStoreIdResp {
  repeated StoreSettle list = 1;
  int64 total = 2;
}

//--------------------------------安心付入住--------------------------------
message StoreCommerce {
  int64 id = 1; //id
  int64 storeId = 2; //storeId
  string storeCode = 3; //店铺编码
  string orderId = 4; //订单号
  string orderStatus = 5; //订单状态
  string merchantName = 6; //商户名称
  string merchantLogonId = 7; //商户登录ID
  string sceneBizCode = 8; //场景业务编码
  int64 needOperationAuth = 9; //代运营
  int64 needInterfaceAuth = 10; //代开发
  string backProductCode = 11; //产品编码
  double priceRate = 12; //费率
  string phone = 13; //手机号
  string failReasons = 14; //失败原因
  string waitProcessTaskUrl = 15; //待处理任务链接
  int64 createAt = 16; //创建时间
  int64 updateAt = 17; //修改时间
}

message AddStoreCommerceReq {
  int64 storeId = 1; //storeId
  string storeCode = 2; //店铺编码
  string orderId = 3; //订单号
  string orderStatus = 4; //订单状态
  string merchantName = 5; //商户名称
  string merchantLogonId = 6; //商户登录ID
  string sceneBizCode = 7; //场景业务编码
  int64 needOperationAuth = 8; //代运营
  int64 needInterfaceAuth = 9; //代开发
  string backProductCode = 10; //产品编码
  double priceRate = 11; //费率
  string phone = 12; //手机号
  string failReasons = 13; //失败原因
  string waitProcessTaskUrl = 14; //待处理任务链接
}

message StoreCommerceResp {
  int64 id = 1;
}

message UpdateStoreCommerceReq {
  int64 id = 1; //id
  int64 storeId = 2; //storeId
  string storeCode = 3; //店铺编码
  string orderId = 4; //订单号
  string orderStatus = 5; //订单状态
  string merchantName = 6; //商户名称
  string merchantLogonId = 7; //商户登录ID
  string sceneBizCode = 8; //场景业务编码
  int64 needOperationAuth = 9; //代运营
  int64 needInterfaceAuth = 10; //代开发
  string backProductCode = 11; //产品编码
  double priceRate = 12; //费率
  string phone = 13; //手机号
  string failReasons = 14; //失败原因
  string waitProcessTaskUrl = 15; //待处理任务链接
}

message GetStoreCommerceByIdReq {
  int64 id = 1;
}

message GetStoreCommerceByStoreIdReq {
  int64 storeId = 1;
}
message GetStoreCommerceByOrderIdReq {
  string orderId = 1;
}

message GetStoreCommerceResp {
  StoreCommerce info = 1;
}

//--------------------------------安心付佣金--------------------------------
message StoreCommerceCommission {
  int64 id = 1; //id
  int64 storeId = 2; //storeId
  int64 commerceId = 3; //commerceId
  string merchantAppId = 4; //商户应用ID
  double isvRate = 5; //ISV费率
  string commissionMode = 6; //佣金模式
  string commissionScene = 7; //佣金场景
  int64 longTerm = 8; //长期有效
  string commissionValidTime = 9; //开始时间
  string commissionInvalidTime = 10; //结束时间
  int64 createAt = 11; //创建时间
  int64 updateAt = 12; //修改时间
}

message AddStoreCommerceCommissionReq {
  int64 storeId = 1; //storeId
  int64 commerceId = 2; //commerceId
  string merchantAppId = 3; //商户应用ID
  double isvRate = 4; //ISV费率
  string commissionMode = 5; //佣金模式
  string commissionScene = 6; //佣金场景
  int64 longTerm = 7; //长期有效
  string commissionValidTime = 8; //开始时间
  string commissionInvalidTime = 9; //结束时间
  int64 createAt = 10; //创建时间
  int64 updateAt = 11; //修改时间
}

message StoreCommerceCommissionResp {
  int64 id = 1;
}

message UpdateStoreCommerceCommissionReq {
  int64 id = 1; //id
  int64 storeId = 2; //storeId
  int64 commerceId = 3; //commerceId
  string merchantAppId = 4; //商户应用ID
  double isvRate = 5; //ISV费率
  string commissionMode = 6; //佣金模式
  string commissionScene = 7; //佣金场景
  int64 longTerm = 8; //长期有效
  string commissionValidTime = 9; //开始时间
  string commissionInvalidTime = 10; //结束时间
  int64 createAt = 11; //创建时间
  int64 updateAt = 12; //修改时间
}

message GetStoreCommerceCommissionByIdReq {
  int64 id = 1; //id
}

message GetStoreCommerceCommissionResp {
  StoreCommerceCommission info = 1; //storeCommerceCommission
}

message ListStoreCommerceCommissionReq {
  int64 msId = 1;
  int64 page = 2;
  int64 size = 3;
  string params = 4;

}
message ListStoreCommerceCommissionResp {
  repeated StoreCommerceCommission list = 1;
  int64 total = 2;
}

//--------------------------------安心付多角色佣金--------------------------------
message StoreCommerceCommissionRole {
  int64 id = 1; //id
  int64 storeId = 2; //storeId
  int64 commerceId = 3; //commerceId
  string roleType = 4; //角色类型
  string roleAccountName = 5; //角色账户名称
  string roleAlipayAccount = 6; //角色支付宝账号
  double roleRate = 7; //角色费率
  int64 createAt = 8; //创建时间
  int64 updateAt = 9; //修改时间
}

message AddStoreCommerceCommissionRoleReq {
  int64 storeId = 1; //storeId
  int64 commerceId = 2; //commerceId
  string roleType = 3; //角色类型
  string roleAccountName = 4; //角色账户名称
  string roleAlipayAccount = 5; //角色支付宝账号
  double roleRate = 6; //角色费率
  int64 createAt = 7; //创建时间
  int64 updateAt = 8; //修改时间
}

message UpdateStoreCommerceCommissionRoleReq {
  int64 id = 1; //id
  int64 storeId = 2; //storeId
  int64 commerceId = 3; //commerceId
  string roleType = 4; //角色类型
  string roleAccountName = 5; //角色账户名称
  string roleAlipayAccount = 6; //角色支付宝账号
  double roleRate = 7; //角色费率
  int64 createAt = 8; //创建时间
  int64 updateAt = 9; //修改时间
}

message StoreCommerceCommissionRoleResp {
  int64 id = 1;
}

message GetStoreCommerceCommissionRoleByIdReq {
  int64 id = 1; //id
}

message GetStoreCommerceCommissionRoleResp {
  StoreCommerceCommissionRole info = 1; //storeCommerceCommissionRole
}

message ListStoreCommerceCommissionRoleReq{
  int64 msId = 1;
  int64 page = 2;
  int64 size = 3;
  string params = 4;
}
message ListStoreCommerceCommissionRoleResp {
  repeated StoreCommerceCommissionRole list = 1;
  int64 total = 2;
}

//--------------------------------小程序附件信息数据表--------------------------------
message StoreAppletAttachment {
  int64 id = 1; //id
  int64 appletId = 2; //小程序id（store_applet.id）
  int64 type = 3; //附件类型:0-前置审批附件,1-主体附件,2-小程序附件
  string attachmentField = 4; //附件的附件字段：当type=0时，attachment_field表示前置审批项类型
  string attachmentValue = 5; //附件的附件字段：当type=0时，attachment_value表示小程序前置审批项号
  string url = 6; //附件材料链接地址
  string mediaId = 7; //小程序备案文件材料凭证ID
  int64 createTime = 8; //创建时间
}

message GetStoreAppletAttachmentUrlReq{
  int64 appletId = 1; //小程序id（store_applet.id）
  int64 type = 2; //附件类型:0-前置审批附件,1-主体附件,2-小程序附件
  string url = 3; //附件材料链接地址 url
}
message GetStoreAppletAttachmentUrlResp{
  StoreAppletAttachment storeAppletAttachment = 1;
}

message AddStoreAppletAttachmentReq {
  int64 appletId = 1; //小程序id（store_applet.id）
  int64 type = 2; //附件类型:0-前置审批附件,1-主体附件,2-小程序附件
  string attachmentField = 3; //附件的附件字段：当type=0时，attachment_field表示前置审批项类型
  string attachmentValue = 4; //附件的附件字段：当type=0时，attachment_value表示小程序前置审批项号
  string url = 5; //附件材料链接地址
  string mediaId = 6; //小程序备案文件材料凭证ID
}

message AddStoreAppletAttachmentResp {
  int64 id = 1; //id
}

message UpdateStoreAppletAttachmentReq {
  int64 id = 1; //id
  int64 appletId = 2; //小程序id（store_applet.id）
  int64 type = 3; //附件类型:0-前置审批附件,1-主体附件,2-小程序附件
  string attachmentField = 4; //附件的附件字段：当type=0时，attachment_field表示前置审批项类型
  string attachmentValue = 5; //附件的附件字段：当type=0时，attachment_value表示小程序前置审批项号
  string url = 6; //附件材料链接地址
  string mediaId = 7; //小程序备案文件材料凭证ID
}

message UpdateStoreAppletAttachmentResp {
}

message DelStoreAppletAttachmentReq {
  int64 id = 1; //id
}

message DelStoreAppletAttachmentResp {
}

message GetStoreAppletAttachmentByIdReq {
  int64 id = 1; //id
}

message GetStoreAppletAttachmentByAppletIdReq {
  int64 appletId = 1; //id
}

message GetStoreAppletAttachmentByAppletIdResp {
  repeated StoreAppletAttachment storeAppletAttachmentList = 1; // storeAppletAttachment 列表
}

message GetStoreAppletAttachmentByTypeReq {
  int64 appletId = 1; //id
  int64 type = 2; //附件类型:0-前置审批附件,1-主体附件,2-小程序附件
}


// 更新小程序附件请求
message UpdateStoreAppletAttachmentByAppletIdReq {
  int64 appletId = 1; //id
  int64 type = 2; //附件类型:0-前置审批附件,1-主体附件,2-小程序附件
  repeated StoreAppletAttachment storeAppletAttachmentList = 3; // storeAppletAttachment 列表
}

message UpdateStoreAppletAttachmentByAppletIdResp {
  repeated int64 ids = 1; //ids
}


message GetStoreAppletAttachmentByIdResp {
  StoreAppletAttachment storeAppletAttachment = 1; //storeAppletAttachment
}

message SearchStoreAppletAttachmentReq {
  int64 page = 1; //page
  int64 limit = 2; //limit
  int64 id = 3; //id
  int64 appletId = 4; //小程序id（store_applet.id）
  int64 type = 5; //附件类型:0-前置审批附件,1-主体附件,2-小程序附件
  string attachmentField = 6; //附件的附件字段：当type=0时，attachment_field表示前置审批项类型
  string attachmentValue = 7; //附件的附件字段：当type=0时，attachment_value表示小程序前置审批项号
  string url = 8; //附件材料链接地址
  string mediaId = 9; //小程序备案文件材料凭证ID
  int64 createTime = 10; //创建时间
}

message SearchStoreAppletAttachmentResp {
  repeated StoreAppletAttachment storeAppletAttachment = 1; //storeAppletAttachment
}

//--------------------------------小程序自动上架处理信息表--------------------------------
message StoreAppletAutoShelves {
  int64 id = 1; //id
  int64 appletId = 2; //小程序id(store_applet.id)
  int64 appletVersionId = 3; //小程序版本id(store_applet_version.id)
  string storeName = 4; //商户名称【冗余字段方便查询】
  string appName = 5; //小程序名称【冗余字段方便查询】
  string miniCategoryName = 6; //小程序类目名称【冗余字段方便查询】
  string miniCategoryIds = 7; //小程序前台类目【冗余字段方便查询】
  int64 testAppletId = 8; //测试小程序id(store_applet.id)，如果为0表示纯自动化单一小程序测试，不依赖于测试小程序
  string currentVersion = 9; //当前版本
  string templateId = 10; //支付宝小程序模版id
  string templateVersion = 11; //模版版本
  string targetVersion = 12; //目标版本
  string buildVersion = 13; //构建版本
  int64 buildTime = 14; //构建时间
  string auditVersion = 15; //提审版本
  int64 auditTime = 16; //提审时间
  string onlineVersion = 17; //上线版本
  int64 onlineTime = 18; //上架处理时间
  int64 onlineStatus = 19; //上线状态:0-待上架,1-已上架,2-已下架,3-已被强制下架
  int64 status = 20; //任务处理状态：0-等待处理,1-构建中,2-审核中,3-审核通过,4-审核拒绝,5-已上架,6-任务处理失败
  string failReason = 21; //审核/任务处理失败原因
  int64 taskStartTime = 22; //任务将在此时间戳之后开始执行, 如果为0表示立即执行
  int64 createTime = 23; //创建时间
  int64 updateTime = 24; //更新时间
}

message AddStoreAppletAutoShelvesReq {
  StoreAppletAutoShelves storeAppletAutoShelves = 1; // 自动上架任务信息 storeAppletAutoShelves
}

message AddStoreAppletAutoShelvesResp {
  int64 id = 1; //id
}

message UpdateStoreAppletAutoShelvesReq {
  StoreAppletAutoShelves storeAppletAutoShelves = 1; // 自动上架任务信息 storeAppletAutoShelves
}

message UpdateStoreAppletAutoShelvesResp {
}

message DelStoreAppletAutoShelvesReq {
  int64 id = 1; //id
}

message DelStoreAppletAutoShelvesResp {
}

message GetStoreAppletAutoShelvesByIdReq {
  int64 id = 1; //id
}

message GetStoreAppletAutoShelvesByIdResp {
  StoreAppletAutoShelves storeAppletAutoShelves = 1; // 自动上架任务信息 storeAppletAutoShelves
}

message SearchStoreAppletAutoShelvesReq {
  int64 page = 1; //page
  int64 size = 2; //size

  int64 jobType = 3; //任务类型:0-未处理,1-处理中,2-已处理

  // 查询参数
  string params = 4; // params 共用查询参数
}

message SearchStoreAppletAutoShelvesResp {
  int64 total = 1; // 总页数
  repeated StoreAppletAutoShelves list = 2; //storeAppletAutoShelves
}

message FindAutoShelvesByAppletIdAndTargetVersionReq{
  int64 appletId = 1; //小程序id
  string targetVersion = 2; //目标版本
}
message FindAutoShelvesByAppletIdAndTargetVersionResp{
  StoreAppletAutoShelves storeAppletAutoShelves = 1; // 自动上架任务信息 storeAppletAutoShelves
}

message QueryAutoShelvesIsProcessingByAppletIdReq{
  int64 appletId = 1; //小程序id
}

message QueryAutoShelvesIsProcessingByAppletIdResp{
  bool isProcessing = 1; // 是否正在处理
}

//--------------------------------独立小程序关联普通二维码模式信息数据表--------------------------------
message StoreAppletDuliQrcode {
  int64 id = 1; //id
  int64 storeId = 2; //商户id(store.id)
  int64 appletId = 3; //小程序id
  string routeUrl = 4; //路由规则URL
  string mode = 5; //匹配规则
  string pageRedirectionUrl = 6; //小程序功能页地址
  string routeGroup = 7; //路由规则组
  int64 createTime = 8; //创建时间
}

message AddStoreAppletDuliQrcodeReq {
  int64 storeId = 1; //商户id(store.id)
  int64 appletId = 2; //小程序id
  string routeUrl = 3; //路由规则URL
  string mode = 4; //匹配规则
  string pageRedirectionUrl = 5; //小程序功能页地址
  string routeGroup = 6; //路由规则组
}

message AddStoreAppletDuliQrcodeResp {
  int64 id = 1; //id
}

message UpdateStoreAppletDuliQrcodeResp {
}

message DelStoreAppletDuliQrcodeReq {
  int64 id = 1; //id
}

message DelStoreAppletDuliQrcodeResp {
}

message GetStoreAppletDuliQrcodeByIdReq {
  int64 id = 1; //id
}

message GetStoreAppletDuliQrcodeByIdResp {
  StoreAppletDuliQrcode storeAppletDuliQrcode = 1; //storeAppletDuliQrcode
}

message SearchStoreAppletDuliQrcodeReq {
  int64 appletId = 1; //小程序的id(store_applet.id)
}

message SearchStoreAppletDuliQrcodeResp {
  StoreAppletDuliQrcode appletDuliQrcode = 1; //storeAppletDuliQrcode
}
message SearchStoreAppletDuliQrcodeByRouteReq{
  int64 appletId = 1; //小程序的id(store_applet.id)
  string routeUrl = 2; // 路由规则URL
}

message ListStoreAppletDuliQrcodeReq{
  int64 appletId = 1; //小程序的id(store_applet.id)
}
message ListStoreAppletDuliQrcodeResp{
  repeated StoreAppletDuliQrcode list = 1; //storeAppletDuliQrcode
}

//--------------------------------签约合同信息表--------------------------------
message StoreAppletSignContract {
  int64 id = 1; //id
  int64 storeId = 2; //商户的id:store.id
  string storeName = 3; //商户名称
  int64 channel = 4; //标注渠道:0-芝麻先享, 1-汇付宝/卡代扣,2-蚂蚁区块链,3-安心付
  string contractNo = 5; //合同编号
  int64 merchantId = 6; //商户信息id(store_applet_sign_merchant.id)
  int64 uid = 7; //用户id(front.user.id)
  int64 signUid = 8; //签约用户id(store_applet_sign_user.id)
  string name = 9; //用户姓名
  string idCard = 10; //身份证号码
  string mobile = 11; //手机号码
  int64 templateId = 12; //签约模版id(store_applet_sign_template.id)
  int64 orderId = 13; //订单id(渠道对应的订单ID号)
  int64 status = 14; //合同状态：-3-失败,0-等待签约,1-签约中,2-已签约,3-过期,4-拒签,6-作废,100-已签约【订单生效】
  string remark = 15; //合同备注
  string invalidUrl = 16; //合同作废签署链接地址
  int64 invalidDay = 17; //合同作废天数
  int64 invalidEndTime = 18; //合同作废签署截止日期时间戳
  int64 operatorUid = 19; //后台操作员的uid
  int64 createTime = 20; //创建时间
  int64 updateTime = 21; //更新时间
}

message AddStoreAppletSignContractReq {
  StoreAppletSignContract storeAppletSignContract = 1;
}

message AddStoreAppletSignContractResp {
  int64 id = 1; //id
}

message UpdateStoreAppletSignContractReq {
  StoreAppletSignContract storeAppletSignContract = 1; //storeAppletSignContract
}

message UpdateStoreAppletSignContractResp {
}

message DelStoreAppletSignContractReq {
  int64 id = 1; //id
}

message DelStoreAppletSignContractResp {
}

message GetStoreAppletSignContractByIdReq {
  int64 id = 1; //id
}

message GetStoreAppletSignContractByIdResp {
  StoreAppletSignContract storeAppletSignContract = 1; //storeAppletSignContract
}

message GetStoreAppletSignContractByContractNoReq {
  string ContractNo = 1; // 合同编号
}

message GetStoreAppletSignContractByContractNoResp {
  StoreAppletSignContract storeAppletSignContract = 1; //storeAppletSignContract
}

message GetStoreAppletSignContractByOrderIdReq{
  int64 channel = 1; //标注渠道:0-芝麻先享, 1-汇付宝/卡代扣
  int64 orderId = 2; //订单id(front.order_subscription.id)
}

message GetStoreAppletSignContractByOrderIdResp {
  StoreAppletSignContract storeAppletSignContract = 1; //storeAppletSignContract
}

message MultiQueryStoreAppletSignContractByChannelOrderIdsReq{
  int64 channel = 1; // 渠道
  repeated int64 orderIds = 2; // 订单id
}
message MultiQueryStoreAppletSignContractByChannelOrderIdsResp{
  repeated StoreAppletSignContract list = 1;
}

message SearchStoreAppletSignContractReq {
  int64 page = 1; //page
  int64 limit = 2; //limit
  int64 id = 3; //id
  string contractNo = 4; //合同编号
  int64 merchantId = 5; //商户信息id(store_applet_sign_merchant.id)
  int64 templateId = 6; //商户信息id(store_applet_sign_template.id)
  int64 status = 7; //合同状态：-3：失败 0：等待签约 1：签约中 2：已签约 3：过期 4：拒签 6：作废
  int64 createTime = 8; //创建时间
}

message SearchStoreAppletSignContractResp {
  repeated StoreAppletSignContract storeAppletSignContract = 1; //storeAppletSignContract
}

message StoreQueryAppletSignContractReq {
  int64 page = 1; //page
  int64 size = 2; //size
  int64 id = 3; //id
  string contractNo = 4; //合同编号
  int64 storeId = 5; //商户id(store.id)
  int64 templateId = 6; //商户信息id(store_applet_sign_template.id)
  int64 status = 7; //合同状态：0：等待签约 1：签约中 2：已签约 3：过期 4：拒签 6：作废
  repeated int64 signUserIds = 8; // 签约用户id列表(store_applet_sign_user.id)
  int64 channel = 9; //标注渠道:0-芝麻先享, 1-汇付宝/卡代扣
}

message StoreQueryAppletSignContractResp {
  int64 total = 1; // 总页数
  repeated StoreAppletSignContract list = 2; // storeAppletSignContract
}

message QueryAppletSignContractListReq{
  int64 page = 1; //page
  int64 size = 2; //size
  string params = 3; // 查询参数
}

//--------------------------------签约商户信息表--------------------------------
message StoreAppletSignMerchant {
  int64 id = 1; //id
  int64 appletId = 2; //小程序id(store_applet.id)
  string appName = 3; //小程序名称
  int64 storeId = 4; //商户id(store.id)
  int64 isJuhe = 5; //是否是聚合小程序:1-是,0-否
  int64 needSign = 6; //是否需要签约:1-是,0-否
  int64 validateType = 7; //签署方式:3-人脸识别签约,8-手写签名+人脸识别签约,9-手写识别签名+人脸识别签约
  string name = 8; //商户名称
  string account = 9; //商户账号
  string sealNo = 10; //印章编号
  int64 result = 11; //认证结果：0.认证中 1.成功 2.失败
  int64 createTime = 12; //创建时间
  int64 updateTime = 13; //更新时间
}

message AddStoreAppletSignMerchantReq {
  StoreAppletSignMerchant storeAppletSignMerchant = 1; //storeAppletSignMerchant
}

message AddStoreAppletSignMerchantResp {
  int64 id = 1; //id
}

message UpdateStoreAppletSignMerchantReq {
  StoreAppletSignMerchant storeAppletSignMerchant = 1; //storeAppletSignMerchant
}

message UpdateStoreAppletSignMerchantResp {
}

message DelStoreAppletSignMerchantReq {
  int64 id = 1; //id
}

message DelStoreAppletSignMerchantResp {
}

message GetStoreAppletSignMerchantByIdReq {
  int64 id = 1; //id
}

message GetStoreAppletSignMerchantByIdResp {
  StoreAppletSignMerchant storeAppletSignMerchant = 1; //storeAppletSignMerchant
}
message SearchStoreAppletSignMerchantReq{
  int64 storeId = 1; //商户id
}
message SearchStoreAppletSignMerchantResp{
  repeated StoreAppletSignMerchant list = 1;
}

message GetStoreAppletSignMerchantByAccountReq {
  //  int64 appletId = 1; //小程序id(store_applet.id)
  string account = 2; //商户账号
}
message GetStoreAppletSignMerchantByAccountResp {
  StoreAppletSignMerchant storeAppletSignMerchant = 1; //storeAppletSignMerchant
}
message GetStoreAppletSignMerchantByAccountAndAppletIdReq{
  int64 appletId = 1; //小程序id(store_applet.id)
  string account = 2; //商户账号
}

message GetSignMerchantByStoreIdAndAppletIdAndIsJuheReq{
  int64 storeId = 1; //商户id
  int64 appletId = 2; //小程序id
  int64 isJuhe = 3; //是否聚合
}
message GetSignMerchantByStoreIdAndAppletIdAndIsJuheResp{
  StoreAppletSignMerchant storeAppletSignMerchant = 1; //storeAppletSignMerchant
}
message QuerySignMerchantIsNeedSignReq{
  int64 storeId = 1; //商户id
}
message QuerySignMerchantIsNeedSignResp{
  bool needSign = 1; //是否需要签约:1-是,0-否
  int64 id = 2; //id - 只要有一个需要签约，就会返回记录的id
}

//--------------------------------小程序签约模板信息数据表--------------------------------
message StoreAppletSignTemplate {
  int64 id = 1; //id
  int64 appletId = 2; //小程序id(store_applet.id)
  int64 storeId = 3; //商户id(store.id)
  int64 isJuhe = 4; //是否是聚合小程序添加的:1-是,0-否
  string templateIdent = 5; //模板编号
  string templateName = 6; //模板名称
  int64 templateValidityType = 7; //模板有效期类型 0：天数 1：截止日期
  int64 validityTime = 8; //合同签署剩余天数
  int64 validityDate = 9; //合同有效截止日期[时间戳]
  string templateParams = 10; //签约参数-[json 配置文件]，每一个模板都是不同的需要单独编辑和配置
  string fillData = 11; //合同参数-[json 配置文件]，每一个模板都是不同的需要单独编辑和配置
  int64 createTime = 12; //创建时间
  int64 updateTime = 13; //更新时间
}

message AddStoreAppletSignTemplateReq {
  int64 appletId = 1; //小程序id(store_applet.id)
  string templateIdent = 2; //模板编号
  string templateName = 3; //模板名称
  int64 templateValidityType = 4; //模板有效期类型 0：天数 1：截止日期
  int64 validityTime = 5; //合同签署剩余天数
  int64 validityDate = 6; //合同有效截止日期[时间戳]
  string templateParams = 7; //签约参数-[json 配置文件]，每一个模板都是不同的需要单独编辑和配置
  string fillData = 8; //合同参数-[json 配置文件]，每一个模板都是不同的需要单独编辑和配置
  int64 storeId = 9; //商户id(store.id)
  int64 isJuhe = 10; //是否聚合
}

message AddStoreAppletSignTemplateResp {
  int64 id = 1; //id
}

message UpdateStoreAppletSignTemplateReq {
  StoreAppletSignTemplate storeAppletSignTemplate = 1; //storeAppletSignTemplate
}

message UpdateStoreAppletSignTemplateResp {
}

message DelStoreAppletSignTemplateReq {
  int64 id = 1; //id
}

message DelStoreAppletSignTemplateResp {
}

message GetStoreAppletSignTemplateByIdReq {
  int64 id = 1; //id
}

message GetStoreAppletSignTemplateByIdResp {
  StoreAppletSignTemplate storeAppletSignTemplate = 1; //storeAppletSignTemplate
}
message GetSignTemplateByTemplateIdentReq{
  string templateIdent = 1; //模板编号
}
message GetStoreAppletSignTemplateByTemplateIdentReq{
  int64 appletId = 1; //小程序id(store_applet.id)
  string templateIdent = 2; //模板编号
}

message GetStoreAppletSignTemplateByTemplateIdentResp{
  StoreAppletSignTemplate storeAppletSignTemplate = 1; //storeAppletSignTemplate
}

message SearchStoreAppletSignTemplateReq {
  int64 appletId = 1; //小程序id(store_applet.id)
}

message SearchStoreAppletSignTemplateResp {
  repeated StoreAppletSignTemplate list = 1; //storeAppletSignTemplate
}

message SearchStoreSignTemplateByStoreIdReq{
  int64 storeId = 1; //商户id
  int64 isJuhe = 2; //是否是聚合小程序:1-是,0-否,-1-全部
}
message SearchStoreSignTemplateByStoreIdResp{
  repeated StoreAppletSignTemplate list = 1; //storeAppletSignTemplate
}

//--------------------------------签约用户信息表--------------------------------
message StoreAppletSignUser {
  int64 id = 1; //id
  int64 userId = 2; //front.user_id
  string account = 3; //用户账号:用户唯一识别码
  string name = 4; //用户姓名
  string idCard = 5; //身份证号码
  string mobile = 6; //手机号码
  string sealNo = 7; //印章编号
  int64 createTime = 8; //创建时间
  int64 updateTime = 9; //更新时间
}

message AddStoreAppletSignUserReq {
  int64 userId = 1; //front.user_id
  string account = 2; //用户账号:用户唯一识别码
  string name = 3; //用户姓名
  string idCard = 4; //身份证号码
  string mobile = 5; //手机号码
  string sealNo = 6; //印章编号
}

message AddStoreAppletSignUserResp {
  int64 id = 1; //id
}

message UpdateStoreAppletSignUserReq {
  StoreAppletSignUser storeAppletSignUser = 1; //storeAppletSignUser
}

message UpdateStoreAppletSignUserResp {
}

message MultipleQueryStoreAppletSignUserReq{
  repeated int64 ids = 1; // id列表
}
message MultipleQueryStoreAppletSignUserResp{
  repeated StoreAppletSignUser list = 1; //storeAppletSignUser
}

message DelStoreAppletSignUserReq {
  int64 id = 1; //id
}

message DelStoreAppletSignUserResp {
}

message GetStoreAppletSignUserByIdReq {
  int64 id = 1; //id
}

message GetStoreAppletSignUserByIdResp {
  StoreAppletSignUser storeAppletSignUser = 1; //storeAppletSignUser
}

message GetStoreAppletSignUserByAccountReq{
  string account = 1; //用户账号:用户唯一识别码
}
message GetStoreAppletSignUserByAccountResp{
  StoreAppletSignUser storeAppletSignUser = 1; //storeAppletSignUser
}


message SearchStoreAppletSignUserReq {
  int64 page = 1; //page
  int64 limit = 2; //limit
  int64 id = 3; //id
  string account = 4; //用户账号:用户唯一识别码
  string name = 5; //用户姓名
  string idCard = 6; //身份证号码
  string mobile = 7; //手机号码
  int64 createTime = 8; //创建时间
}

message SearchStoreAppletSignUserResp {
  repeated StoreAppletSignUser storeAppletSignUser = 1; //storeAppletSignUser
}

//--------------------------------实名证件信息比对表--------------------------------
message StoreAppletUserCertVerify {
  int64 id = 1; //id
  int64 userId = 2; //front.user_id
  string name = 3; //用户姓名
  string idCard = 4; //身份证号码
  string mobile = 5; //手机号码
  int64 createTime = 6; //创建时间
}

message AddStoreAppletUserCertVerifyReq {
  int64 userId = 1; //front.user_id
  string name = 2; //用户姓名
  string idCard = 3; //身份证号码
  string mobile = 4; //手机号码
}

message AddStoreAppletUserCertVerifyResp {
  int64 id = 1; //id
}

message SearchAppletUserCertVerifyReq{
  int64 userId = 1; //front.user_id
  string idCard = 3; //身份证号码
}
message SearchAppletUserCertVerifyResp{
  StoreAppletUserCertVerify storeAppletUserCertVerify = 1; // 实名证件信息
}

message UpdateStoreAppletUserCertVerifyReq {
  int64 id = 1; //id
  int64 userId = 2; //front.user_id
  string name = 3; //用户姓名
  string idCard = 4; //身份证号码
  string mobile = 5; //手机号码
}

message UpdateStoreAppletUserCertVerifyResp {
}

message DelStoreAppletUserCertVerifyReq {
  int64 id = 1; //id
}

message DelStoreAppletUserCertVerifyResp {
}

message GetStoreAppletUserCertVerifyByIdReq {
  int64 id = 1; //id
}

message GetStoreAppletUserCertVerifyByIdResp {
  StoreAppletUserCertVerify storeAppletUserCertVerify = 1; //storeAppletUserCertVerify
}

message SearchStoreAppletUserCertVerifyReq {
  int64 page = 1; //page
  int64 limit = 2; //limit
  int64 id = 3; //id
  int64 userId = 4; //front.user_id
  string name = 5; //用户姓名
  string idCard = 6; //身份证号码
  string mobile = 7; //手机号码
  int64 createTime = 8; //创建时间
}

message SearchStoreAppletUserCertVerifyResp {
  repeated StoreAppletUserCertVerify storeAppletUserCertVerify = 1; //storeAppletUserCertVerify
}

//--------------------------------小程序版本信息数据表--------------------------------
message StoreAppletVersion {
  int64 id = 1; //id
  int64 channel = 2; //标注小程序渠道:0-芝麻先享, 1-汇付宝/卡代扣,2-蚂蚁区块链,3-安心付
  string miniCategoryName = 3; //小程序类目名称
  string miniCategoryIds = 4; //小程序前台类目
  string appVersion = 5; //小程序版本号
  string templateId = 6; //小程序模板id
  string templateVersion = 7; //模板版本号
  string versionDesc = 8; //小程序版本描述
  int64 createTime = 9; //创建时间
  int64 updateTime = 10; //更新时间
}

message AddStoreAppletVersionReq {
  StoreAppletVersion storeAppletVersion = 1; //storeAppletVersion
}

message AddStoreAppletVersionResp {
  int64 id = 1; //id
}

message UpdateStoreAppletVersionReq {
  StoreAppletVersion storeAppletVersion = 1; //storeAppletVersion
}

message UpdateStoreAppletVersionResp {
}

message DelStoreAppletVersionReq {
  int64 id = 1; //id
}

message DelStoreAppletVersionResp {
}

message GetStoreAppletVersionByIdReq {
  int64 id = 1; //id
}

message GetStoreAppletVersionByIdResp {
  StoreAppletVersion storeAppletVersion = 1; //storeAppletVersion
}

message SearchStoreAppletVersionReq {
  int64 page = 1; //page
  int64 limit = 2; //limit
  int64 id = 3; //id
  string miniCategoryIds = 4; //小程序前台类目
  string appVersion = 5; //小程序版本号
  string templateId = 6; //小程序模板id
  string templateVersion = 7; //模板版本号
  string versionDesc = 8; //小程序版本描述
  int64 createTime = 9; //创建时间
}

message SearchStoreAppletVersionResp {
  repeated StoreAppletVersion storeAppletVersionList = 1; //storeAppletVersion
}

message GetStoreAppletVersionByMiniCategoryReq {
  string miniCategoryIds = 1; //小程序前台类目
  int64 channel = 2; // 小程序渠道
}

message GetStoreAppletVersionByMiniCategoryResp {
  StoreAppletVersion storeAppletVersion = 1; //storeAppletVersion
}

//--------------------------------店铺/商户备案图片数据表--------------------------------
message StoreImage {
  int64 id = 1; //id
  string appId = 2; //AppId
  int64 storeId = 3; //店铺/商户id
  string mediaId = 4; //图片的业务地址(目前包括id和url)
  string imageUrl = 5; //图片的业务地址
  string imageType = 6; //内部业务图片类型
  string fileType = 7; //API文件类型(BUSINESS_LICENSE:营业执照;ID_CARD:法人身份证;MINI_PROGRAM_ATTACHMENT:其他证件)
  string method = 8; //接口方法:alipay.*.*.*.*.upload
  int64 createTime = 9; //创建时间
  string sn = 10; //商品编号
}
message AddStoreImageReq {
  string appId = 1; //AppId
  int64 storeId = 2; //店铺/商户id
  string mediaId = 3; //小程序备案文件材料凭证ID
  string imageUrl = 4; //图片的业务地址
  string imageType = 5; //业务图片类型(licenceImage:营业执照;legalFrontImages:法人身份证正面;legalReverseImages:法人身份证反面)
  string fileType = 6; //API文件类型(BUSINESS_LICENSE:营业执照;ID_CARD:法人身份证;MINI_PROGRAM_ATTACHMENT:其他证件)
  string method = 7; //接口方法:alipay.*.*.*.*.upload
  string sn = 8; //商品编号
}

message AddStoreImageResp {
  int64 id = 1; //id
}

message GetStoreImageByIdReq {
  int64 id = 1; //id
}
message GetStoreImageOneReq{
  string appId = 1; //AppId
  int64 storeId = 2; //店铺/商户id
  string imageUrl = 3;
  string imageType = 4; //业务图片类型
  string fileType = 5; //API文件类型
  string method = 6; //接口方法:alipay.*.*.*.*.upload
  string sn = 7;
}
message GetStoreImageResp {
  StoreImage info = 1; //storeImage
}

message GetStoreImageListReq {
  string appId = 1; //AppId
  int64 storeId = 2; //店铺/商户id
  string imageUrl = 3;
  string imageType = 4; //业务图片类型
  string fileType = 5; //API文件类型
  string method = 6; //接口方法:alipay.*.*.*.*.upload
  string sn = 7;
  int64 page = 9; //page
  int64 size = 10;
}
message GetStoreImageListResp{
  repeated StoreImage list = 1;
  int64 total = 2;
}

message DeleteStoreImageReq {
  string appId = 1; //AppId
  int64 storeId = 2; //店铺/商户id
}
message DeleteStoreImageResp{
  repeated int64 ids = 1; // id列表
}

message UpdateStoreImageReq{
  StoreImage storeImage = 1; //storeImage
}
message UpdateStoreImageResp{
}

//--------------------------------员工角色v2--------------------------------

message AuthRoleV2 {
  int64 id = 1; //id
  int64 msId = 2; //msId
  int64 storeId = 3; //storeId
  string name = 4; //角色名称
  string role = 5; //角色标识符
  string desc = 6; //角描述
  int64 createAt = 7; //创建时间
  int64 createBy = 8; //staff_id
  int64 updateAt = 9; //更新时间
  int64 updateBy = 10; //staff_id
  int64 status = 11; //状态 1:enable, 0:disable, -1:deleted
  string authItemSet = 12; //权限集合 多个值,号隔开
}

message AddAuthRoleReq {
  int64 msId = 2; //msId
  int64 storeId = 3; //storeId
  string name = 4; //角色名称
  string role = 5; //角色标识符
  string desc = 6; //角描述
  int64 createAt = 7; //创建时间
  int64 createBy = 8; //staff_id
  int64 status = 11; //状态 1:enable, 0:disable, -1:deleted
  string authItemSet = 12; //权限集合 多个值,号隔开
}
message UpdateAuthRoleReq {
  int64 id = 1; //id
  int64 msId = 2; //msId
  int64 storeId = 3; //storeId
  string name = 4; //角色名称
  string role = 5; //角色标识符
  string desc = 6; //角描述
  int64 updateAt = 9; //更新时间
  int64 updateBy = 10; //staff_id
  int64 status = 11; //状态 1:enable, 0:disable, -1:deleted
  string authItemSet = 12; //权限集合 多个值,号隔开
}
message AuthRoleResp {
  int64 id = 1;
}

message GetAuthRoleByIdReq {
  int64 id = 1; //id
  int64 msId = 2;
}
message GetAuthRoleByIdResp {
  AuthRoleV2 info = 1; //authRole
}

message  AuthRoleAllReq{
  int64 msId = 1;
  int64 storeId = 2;
  int64 status = 3;
  string params = 4;
}
message ListAuthRoleReq{
  int64 msId = 1;
  int64 page = 2;
  int64 size = 3;
  string params = 4;
  int64 storeId = 5;
  int64 status = 6;
}
message ListAuthRoleResp{
  repeated AuthRoleV2 list = 1;
  int64 total = 2;
}

//--------------------------------权限角色与员工关系--------------------------------
message AuthRoleUser {
  int64 id = 1; //id
  int64 roleId = 2; //角色编号
  int64 userId = 3; //uid
  int64 createAt = 4; //创建时间
  int64 createBy = 5; //staff_id
  int64 updateAt = 6; //更新时间
  int64 updateBy = 7; //staff_id
  int64 status = 8; //状态 1:enable, 0:disable, -1:deleted
}

message AddAuthRoleUserReq {
  int64 roleId = 1; //角色编号
  int64 userId = 2; //uid
  int64 createAt = 3; //创建时间
  int64 createBy = 4; //staff_id
  int64 status = 7; //状态 1:enable, 0:disable, -1:deleted
}
message UpdateAuthRoleUserReq {
  int64 id = 1; //id
  int64 roleId = 2; //角色编号
  int64 userId = 3; //uid
  int64 updateAt = 6; //更新时间
  int64 updateBy = 7; //staff_id
  int64 status = 8; //状态 1:enable, 0:disable, -1:deleted
}
message AuthRoleUserResp {
  int64 id = 1;
}

message BulkAddAuthRoleUserReq {
  repeated AddAuthRoleUserReq list = 1;
}
message BulkUpdateAuthRoleUserReq {
  repeated UpdateAuthRoleUserReq list = 1;
}
message BulkAuthRoleUserResp{
  int64 ids = 1;
}

message ListAuthRoleUserReq{
  int64 page = 1;
  int64 size = 2;
  string params = 3;
}
message ListAuthRoleUserResp {
  repeated AuthRoleUser list = 1;
  int64 total = 2;
}

message GetAuthRoleUserByIdReq {
  int64 id = 1; //id
}
message GetAuthRoleUserByUserIdReq {
  int64 userid = 1;
}

message GetAuthRoleUserResp {
  AuthRoleUser info = 1; //authRoleUser
}

//--------------------------------authRoleMenu--------------------------------
message AuthRoleMenu {
  int64 id = 1; //id
  int64 roleId = 2; //roleId
  int64 menuId = 3; //menuId
  int64 status = 4; //0禁用 1启用
}

message AddAuthRoleMenuReq {
  int64 roleId = 1; //roleId
  int64 menuId = 2; //menuId
  int64 status = 3; //0禁用 1启用
}
message UpdateAuthRoleMenuReq {
  int64 id = 1; //id
  int64 roleId = 2; //roleId
  int64 menuId = 3; //menuId
  int64 status = 4; //0禁用 1启用
}
message AuthRoleMenuResp {
  int64 id = 1;
}

message BulkAddAuthRoleMenuReq {
  repeated AddAuthRoleMenuReq list = 1;
}
message BulkUpdateAuthRoleMenuReq{
  repeated UpdateAuthRoleMenuReq list = 1;
}
message BulkAuthRoleMenuResp{
  int64 ids = 1;
}

message ListAuthRoleMenuReq{
  int64 page = 1;
  int64 size = 2;
  string params = 3;
}
message ListAuthRoleMenuResp{
  repeated AuthRoleMenu list = 1;
  int64 total = 2;
}

message GetAuthRoleMenuByIdReq {
  int64 id = 1; //id
  int64 status = 2;
}
message GetAuthRoleMenuByRoleIdReq{
  int64 roleId = 1;
  int64 status = 2;
}
message GetAuthRoleMenuByMenuIdReq{
  int64 menuId = 1;
  int64 status = 2;
}

message GetAuthRoleMenuResp {
  AuthRoleMenu info = 1; //authRoleMenu
}
// -----------UserStoreMap--------------------//
message UserStoreMap{
  int64 id = 1;
  int64 userId = 2;
  int64 storeId = 3;
  int64 msId = 4;
}

message UserStoreMapByIdReq{
  int64 id = 1;
}
message GetUserStoreMapReq{
  int64 userId = 1;
  int64 storeId = 2;
  int64 msId = 3;
}
message UserStoreMapGetOneResp{
  UserStoreMap info = 1;
}
message GetStoreByUserIdReq{
  int64 userId = 1;
  int64 page = 2;
  int64 size = 3;
}
message GetUserByStoreIdReq{
  int64 storeId = 1;
  int64 page = 2;
  int64 size = 3;
}

message UserStoreMapResp{
  repeated UserStoreMap list = 1;
  int64 total = 2;
}

message DeleteUserStoreMapReq{
  int64 UserId = 1;
  int64 StoreId = 2;
}
message DeleteUserStoreMapResp{
  int64 id = 1;
}

message QueryAllUserStoreMapReq{}
message QueryAllUserStoreMapResp{
  repeated UserStoreMap list = 1;
}

//--------------------------------配置表--------------------------------
message SysConfig {
  int64 id = 1; //id
  int64 msId = 2; //msId
  int64 storeId = 3; //storeId
  string module = 4; //模块 pms oms ams ums cms
  string keys = 5; //配置key
  string values = 6; //配置value
  int64 status = 7; //状态 0禁用 1启用
  string remark = 8; //备注
  int64 createAt = 9; //createAt
  int64 updateAt = 10; //updateAt
}

message AddSysConfigReq {
  int64 msId = 2; //msId
  int64 storeId = 3; //storeId
  string module = 4; //模块 pms oms ams ums cms
  string keys = 5; //配置key
  string values = 6; //配置value
  int64 status = 7; //状态 0禁用 1启用
  string remark = 8; //备注
}
message BulkAddSysConfigReq{
  repeated AddSysConfigReq list = 1;
}

message UpdateSysConfigReq {
  int64 id = 1; //id
  int64 msId = 2; //msId
  int64 storeId = 3; //storeId
  string module = 4; //模块 pms oms ams ums cms
  string keys = 5; //配置key
  string values = 6; //配置value
  int64 status = 7; //状态 0禁用 1启用
  string remark = 8; //备注
}
message BulkUpdateSysConfigReq{
  repeated UpdateSysConfigReq list = 1;
}

message SysConfigResp {
  int64 id = 1;
}

message ListSysConfigReq{
  int64 msId = 1;
  int64 page = 2;
  int64 size = 3;
  string params = 4;
}

message GetSysConfigByStoreIdReq{
  int64 storeId = 1;
  string module = 2;
  int64 status = 3;
}

message GetSysConfigByModuleReq{
  string module = 1;
  string keys = 2;
  int64 status = 3;
}

message ListSysConfigResp{
  repeated SysConfig list = 1;
  int64 total = 2;
}

message GetSysConfigByIdReq {
  int64 id = 1; //id
}

message GetOneSysConfigReq{
  int64 storeId = 1;
  string module = 2;
  string keys = 3;
  int64 status = 4;
}

message GetSysConfigResp {
  SysConfig info = 1; //sysConfig
}

//--------------------------------店铺通知--------------------------------
message SysNotice {
  int64 id = 1; //id
  int64 storeId = 2; //storeId
  int64 channel = 3; //渠道
  string title = 4; //标题
  string content = 5; //内容
  string imagePath = 6; //图片
  string category = 7; //分类
  int64 sorts = 8; //排序
  int64 createAt = 9; //创建时间
  int64 updateAt = 10; //修改时间
  int64 status = 11; //0禁用 1启用
}

message AddSysNoticeReq {
  int64 storeId = 2; //storeId
  int64 channel = 3; //渠道
  string title = 4; //标题
  string content = 5; //内容
  string imagePath = 6; //图片
  string category = 7; //分类
  int64 sorts = 8; //排序
  int64 status = 11; //0禁用 1启用
}

message UpdateSysNoticeReq {
  int64 id = 1; //id
  int64 storeId = 2; //storeId
  int64 channel = 3; //渠道
  string title = 4; //标题
  string content = 5; //内容
  string imagePath = 6; //图片
  string category = 7; //分类
  int64 sorts = 8; //排序
  int64 status = 11; //0禁用 1启用
}

message SysNoticeResp {
  int64 id = 1;
}

message GetSysNoticeByIdReq {
  int64 id = 1; //id
}

message GetSysNoticeResp {
  SysNotice info = 1; //sysNotice
}

message ListSysNoticeReq{
  int64 msId = 1;
  int64 page = 2;
  int64 size = 3;
  int64 status = 4;
  int64 storeId = 5;
  string params = 6;
  string category = 7;
  repeated int64 channel = 8;
}

message ListSysNoticeResp{
  repeated SysNotice list = 1;
  int64 total = 2;
}

//--------------------------------系统分类表--------------------------------
message SysCategory {
  int64 id = 1; //id
  int64 storeId = 2; //storeId
  string sysName = 3; //sysName
  int64 parentId = 4; //parentId
  string categoryId = 5;
  string categoryName = 6;
  int64 status = 7;
  int64 createAt = 8;
  int64 updateAt = 9;
}

message AddSysCategoryReq {
  int64 storeId = 1; //storeId
  string sysName = 2; //sysName
  int64 parentId = 3; //parentId
  string categoryId = 4;
  string categoryName = 5;
  int64 status = 6; //0 1
}

message SysCategoryResp {
  int64 id = 1;
}

message UpdateSysCategoryReq {
  int64 id = 1; //id
  int64 storeId = 2; //storeId
  string sysName = 3; //sysName
  int64 parentId = 4; //parentId
  string categoryId = 5;
  string categoryName = 6;
  int64 status = 7;
}

message GetSysCategoryByIdReq {
  int64 id = 1; //id
}

message GetSysCategoryResp {
  SysCategory info = 1;
}

message AllSysCategoryReq {
  string SysName = 1;
}

message ListSysCategoryReq{
  int64 msId = 1;
  int64 page = 2;
  int64 size = 3;
  string params = 4;
}

message ListSysCategoryResp{
  repeated SysCategory list = 1;
  int64 total = 2;
}

//--------------------------------qrcode表--------------------------------
message Qrcode {
  int64 id = 1; //id
  string sn = 2; //sn
  int64 storeId = 3; //id
  string storeName = 4; //名称
  string fromImg = 5; //来源图片
  string qrcode = 6; //二维码
  string qrcodeType = 7; //二维码类型
  string qrcodeUrl = 8; //二维码地址
  int64 usageCount = 9; //使用次数
  int64 status = 10; //状态 0已失效 1正常
  int64 createAt = 11; //创建时间
  int64 createBy = 12; //创建人
  int64 updateBy = 13; //更新人
  int64 updateAt = 14; //更新时间
}

message AddQrcodeReq {
  string sn = 1; //sn
  int64 storeId = 2; //id
  string storeName = 3; //名称
  string fromImg = 4; //来源图片
  string qrcode = 5; //二维码
  string qrcodeType = 6; //二维码类型
  string qrcodeUrl = 7; //二维码地址
  int64 usageCount = 8; //使用次数
  int64 status = 9; //状态 0已失效 1正常
  int64 createAt = 10; //创建时间
  int64 createBy = 11; //创建人
  int64 updateBy = 12; //更新人
  int64 updateAt = 13; //更新时间
}

message AddQrcodeResp {
  int64 id = 1;
}

message UpdateQrcodeReq {
  int64 id = 1; //id
  string sn = 2; //sn
  int64 storeId = 3; //id
  string storeName = 4; //名称
  string fromImg = 5; //来源图片
  string qrcode = 6; //二维码
  string qrcodeType = 7; //二维码类型
  string qrcodeUrl = 8; //二维码地址
  int64 usageCount = 9; //使用次数
  int64 status = 10; //状态 0已失效 1正常
  int64 createAt = 11; //创建时间
  int64 createBy = 12; //创建人
  int64 updateBy = 13; //更新人
  int64 updateAt = 14; //更新时间
}

message UpdateQrcodeResp {
  int64 id = 1;
}

message GetQrcodeByIdReq {
  int64 id = 1; //id
}
message GetQrcodeBySnReq{
  string sn = 1;
}
message GetQrcodeResp {
  Qrcode info = 1; //qrcode
}

message ListQrcodeReq{
  int64 page = 1;
  int64 size = 2;
}
message ListQrcodeResp{
  repeated Qrcode list = 1;
  int64 total = 2;
}

//--------------------------------系统缓存表--------------------------------
message SysCache {
  int64 id = 1; //id
  string cacheKey = 2; //缓存key
  string cacheValue = 3; //缓存值
  string cacheDesc = 4; //缓存描述
  int64 expireTime = 5; //过期时间
  int64 isDelete = 6; //是否删除:0-未删除;1-已删除
  int64 deleteUid = 7; //删除人id(可以用来追述人为清除缓存功能): admin.user.id
  int64 createTime = 8; //创建时间
  int64 updateTime = 9; //更新时间
}
message SetSysCacheReq{
  string cacheKey = 1;
  string cacheValue = 2;
  string cacheDesc = 3;
  int64 expireSeconds = 4;
}
message SetSysCacheResp{
  int64 id = 1;
}
message RemoveSysCacheReq{
  string cacheKey = 1;
  int64 deleteUid = 2;
}
message RemoveSysCacheResp{
  int64 id = 1;
}
message GetSysCacheReq{
  string cacheKey = 1;
}
message GetSysCacheResp{
  SysCache sysCache = 1;
}
message IncrSysCacheReq{
  string cacheKey = 1;
  int64 expireSeconds = 2; // 可以给key重新设置过期时间,如果为0则不修改过期时间
}
message IncrSysCacheResp{
  int64 id = 1;
  int64 incValue = 2;
}

// ------------------------------------
// Rpc Func
// ------------------------------------

service StoreService {

  //-----------------------账户店铺一对多-----------------------
  rpc StoreAdd(AddStoreReq) returns (StoreResp);
  rpc StoreList(ListStoreReq) returns (ListStoreResp);
  rpc StoreUpdate(UpdateStoreReq) returns (StoreResp);
  rpc StoreUpdateCommerceStatus(UpdateStoreCommerceStatusReq) returns (StoreResp);
  rpc StoreUpdateData(StoreUpdateDataReq) returns (StoreUpdateDataResp);

  rpc StoreGetById(GetStoreByIdReq) returns (GetStoreResp);
  rpc StoreGetByExternalId(GetStoreByExternalIdReq) returns (GetStoreResp);
  rpc StoreGetByStoreCode(GetStoreByStoreCodeReq) returns (GetStoreResp);
  rpc StoreGetByAuthAppId(GetStoreByAuthAppIdReq) returns (GetStoreResp);
  rpc StoreGetByMerchantPid(GetStoreByMerchantPidReq) returns (GetStoreResp);
  rpc StoreGetByStoreIds(StoreGetByStoreIdsReq) returns (ListStoreResp);
  rpc StoreGetByCommerceStatus(StoreGetByCommerceStatusReq) returns (ListStoreResp);
  // 获取所有商户 - 此方法会过滤废弃或不在合作的商户
  rpc StoreGetByAll(StoreGetByAllReq) returns (ListStoreResp);
  // 获取所有商户 - 没有过滤获取全部
  rpc StoreGetByAllWithoutFilter(StoreGetByAllReq) returns (ListStoreResp);
  // 根据安心付入驻状态查询商户列表
  rpc QueryStoreByCommerceStatus(QueryStoreByCommerceStatusReq) returns (ListStoreResp);


  // 商户名称模糊查找
  //  rpc StoreSearchByName(StoreSearchByNameReq) returns (StoreSearchByNameResp);
  rpc StoreInfoUpdate(UpdateStoreInfoReq) returns (UpdateStoreInfoResp);
  rpc StoreInfoGetById(GetStoreInfoReq) returns (GetStoreInfoResp);
  rpc StoreInfoGetByName(GetStoreInfoByNameReq) returns (GetStoreInfoResp);

  rpc MiniInfoGetByStoreId(GetMiniInfoReq) returns (GetMiniInfoResp);

  //-----------------------店铺-----------------------
  // Deprecated: 该RPC已废弃，不在使用 - 调用方为api_front-> 获取门店列表
  rpc ListByAppId(FrontListByAppIdReq) returns (FrontListByAppIdResp);
  rpc ListByMcc(FrontListByMccReq) returns(FrontListByAppIdResp);
  rpc FrontStoreInfoById(FrontStoreinfoByIdReq) returns (FrontStoreinfoResp);
  // Deprecated: 该RPC已废弃，不在使用 - 调用方为api_front-> common.StoreVerify
  //  rpc FrontStoreInfoByAppId(FrontStoreinfoByAppIdReq) returns (FrontStoreinfoResp);

  //---------------------商户小程序---------------------
  // 查询商户平台小程序
  rpc QueryPlatformStoreApplet(QueryPlatformStoreAppletReq) returns (QueryPlatformStoreAppletResp);

  // 查询小程序列表
  rpc StoreAppletList(ListStoreAppletReq) returns (ListStoreAppletResp);
  // 添加小程序
  rpc StoreAppletAdd(AddStoreAppletReq) returns (StoreAppletResp);
  rpc StoreAppletUpdate(UpdateStoreAppletReq) returns (StoreAppletResp);
  rpc StoreAppletGetById(GetStoreAppletReq) returns (GetStoreAppletResp);
  rpc StoreAppletGetByOutOrderNo(GetStoreAppletByOutOrderNoReq) returns (GetStoreAppletResp);
  //【标注】此方法只在消息通知里使用
  rpc UpdateStoreApplet(UpdateStoreAppletReq) returns (StoreAppletResp);

  // 通过storeId查询小程序
  // Deprecated: 该方法已弃用!请使用通过appId查询小程序，新版本渠道可以随意切换！
  //  rpc StoreAppletGetByStoreId(GetStoreAppletByStoreIdReq) returns (GetStoreAppletResp);

  // 商户查询自己的小程序
  // Deprecated: 该方法已弃用!请使用通过appId查询小程序，新版本渠道可以随意切换！
  //  rpc StoreQueryApplet(StoreQueryAppletReq) returns (StoreQueryAppletResp);

  // 查询渠道商户的小程序[已弃用]
  // Deprecated: 该方法已弃用!请使用通过appId查询小程序，新版本渠道可以随意切换！
  //  rpc StoreChannelQueryApplet(StoreChannelQueryAppletReq) returns (StoreChannelQueryAppletResp);

  // 查询指定类目的小程序
  rpc QueryAppletByMiniCategory(QueryAppletByMiniCategoryReq) returns (QueryAppletByMiniCategoryResp);

  // 通过appId查询小程序
  rpc QueryAppletByAppId(QueryAppletByAppIdReq) returns (QueryAppletByAppIdResp);

  // 获取商户原始渠道的小程序(注意:原始渠道不能当渠道使用！仅用于判断小程序的渠道所属) - 渠道会切换，原始渠道不会。一个商户只能有一个原始渠道的小程序
  rpc QueryStoreAppletByOriginalChannel(QueryStoreAppletByOriginalChannelReq) returns (QueryStoreAppletByOriginalChannelResp);

  // 查询商户所有的小程序
  rpc QueryAllAppletByStoreId(QueryAllAppletByStoreIdReq) returns (QueryAllAppletByStoreIdResp);
  // 查询所有聚合小程序
  rpc QueryJuheAppletList(QueryJuheAppletListReq) returns (QueryJuheAppletListResp);

  //-----------------------小程序附件信息数据表-----------------------
  // 通过storeAppletId查询url小程序附件
  rpc GetStoreAppletAttachmentUrl(GetStoreAppletAttachmentUrlReq) returns (GetStoreAppletAttachmentUrlResp);
  // 添加单个小程序附件
  rpc AddStoreAppletAttachment(AddStoreAppletAttachmentReq) returns (AddStoreAppletAttachmentResp);

  // 通过storeAppletId批量添加小程序附件
  //  rpc AddStoreAppletAttachmentByAppletId(UpdateStoreAppletAttachmentByAppletIdReq) returns (UpdateStoreAppletAttachmentByAppletIdResp);

  // 查询小程序指定类型的附件
  rpc GetStoreAppletAttachmentByType(GetStoreAppletAttachmentByTypeReq) returns (GetStoreAppletAttachmentByAppletIdResp);

  // 通过storeAppletId获取小程序附件
  rpc GetStoreAppletAttachmentByAppletId(GetStoreAppletAttachmentByAppletIdReq) returns (GetStoreAppletAttachmentByAppletIdResp);
  // 通过storeAppletId更新小程序附件
  rpc UpdateStoreAppletAttachmentByAppletId(UpdateStoreAppletAttachmentByAppletIdReq) returns (UpdateStoreAppletAttachmentByAppletIdResp);
  //-----------------------小程序自动上架处理信息表-----------------------
  // 添加自动上架任务
  rpc AddStoreAppletAutoShelves(AddStoreAppletAutoShelvesReq) returns (AddStoreAppletAutoShelvesResp);
  // 修改自动上架任务
  rpc UpdateStoreAppletAutoShelves(UpdateStoreAppletAutoShelvesReq) returns (UpdateStoreAppletAutoShelvesResp);
  //  rpc DelStoreAppletAutoShelves(DelStoreAppletAutoShelvesReq) returns (DelStoreAppletAutoShelvesResp);
  //  rpc GetStoreAppletAutoShelvesById(GetStoreAppletAutoShelvesByIdReq) returns (GetStoreAppletAutoShelvesByIdResp);
  // 查询自动上架任务
  rpc SearchStoreAppletAutoShelves(SearchStoreAppletAutoShelvesReq) returns (SearchStoreAppletAutoShelvesResp);
  // 查询小程序与处理的目标的版本号任务信息
  rpc FindAutoShelvesByAppletIdAndTargetVersion(FindAutoShelvesByAppletIdAndTargetVersionReq) returns (FindAutoShelvesByAppletIdAndTargetVersionResp);
  // 查询小程序上架是否在自动任务处理中
  rpc QueryAutoShelvesIsProcessingByAppletId(QueryAutoShelvesIsProcessingByAppletIdReq) returns (QueryAutoShelvesIsProcessingByAppletIdResp);

  //-----------------------独立小程序关联普通二维码模式信息数据表-----------------------
  rpc AddStoreAppletDuliQrcode(AddStoreAppletDuliQrcodeReq) returns (AddStoreAppletDuliQrcodeResp);
  rpc DelStoreAppletDuliQrcode(DelStoreAppletDuliQrcodeReq) returns (DelStoreAppletDuliQrcodeResp);
  rpc GetStoreAppletDuliQrcodeById(GetStoreAppletDuliQrcodeByIdReq) returns (GetStoreAppletDuliQrcodeByIdResp);
  // 查询小程序单个独立小程序关联普通二维码 - 【已废弃】改为指定路由查询
  //  rpc SearchStoreAppletDuliQrcode(SearchStoreAppletDuliQrcodeReq) returns (SearchStoreAppletDuliQrcodeResp);
  // 查询小程序关联的所有普通二维码
  rpc ListStoreAppletDuliQrcode(ListStoreAppletDuliQrcodeReq) returns (ListStoreAppletDuliQrcodeResp);
  // 指定路由查询小程序独立小程序关联普通二维码
  rpc SearchStoreAppletDuliQrcodeByRoute(SearchStoreAppletDuliQrcodeByRouteReq) returns (SearchStoreAppletDuliQrcodeResp);
  //-----------------------签约合同信息表-----------------------
  // 添加合同信息
  rpc AddStoreAppletSignContract(AddStoreAppletSignContractReq) returns (AddStoreAppletSignContractResp);
  // 通过合同号查询合同信息
  rpc GetStoreAppletSignContractByContractNo(GetStoreAppletSignContractByContractNoReq) returns (GetStoreAppletSignContractByContractNoResp);
  // 通过订单id查询合同信息
  rpc GetStoreAppletSignContractByOrderId(GetStoreAppletSignContractByOrderIdReq) returns (GetStoreAppletSignContractByOrderIdResp);

  // 通过渠道订单id批量查询渠道订单合同
  rpc MultiQueryStoreAppletSignContractByChannelOrderIds(MultiQueryStoreAppletSignContractByChannelOrderIdsReq) returns (MultiQueryStoreAppletSignContractByChannelOrderIdsResp);

  // 更新合同信息
  rpc UpdateStoreAppletSignContract(UpdateStoreAppletSignContractReq) returns (UpdateStoreAppletSignContractResp);
  // 商户查询签约的合同信息
  rpc StoreQueryAppletSignContract(StoreQueryAppletSignContractReq) returns (StoreQueryAppletSignContractResp);
  // 查询签约的合同列表
  rpc QueryAppletSignContractList(QueryAppletSignContractListReq) returns (StoreQueryAppletSignContractResp);


  //-----------------------签约商户信息表-----------------------
  // 添加签约商户信息
  rpc AddStoreAppletSignMerchant(AddStoreAppletSignMerchantReq) returns (AddStoreAppletSignMerchantResp);
  // 更新签约商户信息
  rpc UpdateStoreAppletSignMerchant(UpdateStoreAppletSignMerchantReq) returns (UpdateStoreAppletSignMerchantResp);
  // 根据account查询签约商户信息-> 商户可能有多个小程序，如果需小程序校验请调用 GetStoreAppletSignMerchantByAccountAndAppletId
  rpc GetStoreAppletSignMerchantByAccount(GetStoreAppletSignMerchantByAccountReq) returns (GetStoreAppletSignMerchantByAccountResp);
  // 根据account查询小程序签约商户信息
  rpc GetStoreAppletSignMerchantByAccountAndAppletId(GetStoreAppletSignMerchantByAccountAndAppletIdReq) returns (GetStoreAppletSignMerchantByAccountResp);


  // 根据小程序id查询签约商户信息[已弃用]
  // Deprecated: 未兼容聚合与独立，现在使用商户标识查询数据确保唯一性
  //  rpc GetStoreAppletSignMerchantByAppletId(GetStoreAppletSignMerchantByAppletIdReq) returns (GetStoreAppletSignMerchantByAppletIdResp);

  // 根据storeId、appletId、isJuhe查询签约商户信息【使用商户标识查询数据确保唯一性】
  rpc GetSignMerchantByStoreIdAndAppletIdAndIsJuhe(GetSignMerchantByStoreIdAndAppletIdAndIsJuheReq) returns (GetSignMerchantByStoreIdAndAppletIdAndIsJuheResp);

  // 查询签约商户是否需要签约
  rpc QuerySignMerchantIsNeedSign(QuerySignMerchantIsNeedSignReq) returns (QuerySignMerchantIsNeedSignResp);

  // 根据id查询签约商户信息
  rpc GetStoreAppletSignMerchantById(GetStoreAppletSignMerchantByIdReq) returns (GetStoreAppletSignMerchantByIdResp);
  // 查询签约商户列表[聚合]
  rpc SearchStoreAppletSignMerchant(SearchStoreAppletSignMerchantReq) returns (SearchStoreAppletSignMerchantResp);

  //-----------------------签约用户信息表-----------------------
  // 添加签约用户
  rpc AddStoreAppletSignUser(AddStoreAppletSignUserReq) returns (AddStoreAppletSignUserResp);
  // 通过账号查询签约用户
  rpc GetStoreAppletSignUserByAccount(GetStoreAppletSignUserByAccountReq) returns (GetStoreAppletSignUserByAccountResp);
  // 查询小程序的签约用户信息
  rpc SearchStoreAppletSignUser(SearchStoreAppletSignUserReq) returns (SearchStoreAppletSignUserResp);
  // 通过id查询签约用户
  rpc GetStoreAppletSignUserById(GetStoreAppletSignUserByIdReq) returns (GetStoreAppletSignUserByIdResp);
  // 修改签约用户信息
  rpc UpdateStoreAppletSignUser(UpdateStoreAppletSignUserReq) returns (UpdateStoreAppletSignUserResp);
  // 根据id列表批量查询签约商户信息
  rpc MultipleQueryStoreAppletSignUser(MultipleQueryStoreAppletSignUserReq) returns (MultipleQueryStoreAppletSignUserResp);

  //-----------------------小程序签约模板信息数据表-----------------------
  // 通过模板编号查询签约模板
  rpc GetSignTemplateByTemplateIdent(GetSignTemplateByTemplateIdentReq) returns (GetStoreAppletSignTemplateByTemplateIdentResp);
  // 通过模板编号查询小程序签约模板
  rpc GetStoreAppletSignTemplateByTemplateIdent(GetStoreAppletSignTemplateByTemplateIdentReq) returns (GetStoreAppletSignTemplateByTemplateIdentResp);
  // 添加小程序签约模板
  rpc AddStoreAppletSignTemplate(AddStoreAppletSignTemplateReq) returns (AddStoreAppletSignTemplateResp);
  // 更新小程序签约模板
  rpc UpdateStoreAppletSignTemplate(UpdateStoreAppletSignTemplateReq) returns (UpdateStoreAppletSignTemplateResp);
  // 删除小程序签约模板
  rpc DelStoreAppletSignTemplate(DelStoreAppletSignTemplateReq) returns (DelStoreAppletSignTemplateResp);
  // 查询小程序签约模板
  rpc GetStoreAppletSignTemplateById(GetStoreAppletSignTemplateByIdReq) returns (GetStoreAppletSignTemplateByIdResp);
  // 查询小程序签约模板
  rpc SearchStoreAppletSignTemplate(SearchStoreAppletSignTemplateReq) returns (SearchStoreAppletSignTemplateResp);
  // 查询商户的签约模版
  rpc SearchStoreSignTemplateByStoreId(SearchStoreSignTemplateByStoreIdReq) returns (SearchStoreSignTemplateByStoreIdResp);

  //-----------------------实名证件信息比对表-----------------------
  // 添加用户实名证件信息
  rpc AddStoreAppletUserCertVerify(AddStoreAppletUserCertVerifyReq) returns (AddStoreAppletUserCertVerifyResp);
  // 查询用户的实名证件信息
  rpc SearchAppletUserCertVerify(SearchAppletUserCertVerifyReq) returns (SearchAppletUserCertVerifyResp);

  //-----------------------小程序版本信息数据表-----------------------
  rpc AddStoreAppletVersion(AddStoreAppletVersionReq) returns (AddStoreAppletVersionResp);
  // 更新小程序版本信息
  rpc UpdateStoreAppletVersion(UpdateStoreAppletVersionReq) returns (UpdateStoreAppletVersionResp);
  rpc DelStoreAppletVersion(DelStoreAppletVersionReq) returns (DelStoreAppletVersionResp);
  // 查询小程序版本信息
  rpc GetStoreAppletVersionById(GetStoreAppletVersionByIdReq) returns (GetStoreAppletVersionByIdResp);
  // 查询小程序版本列表
  rpc SearchStoreAppletVersion(SearchStoreAppletVersionReq) returns (SearchStoreAppletVersionResp);
  // 根据小程序类目查询版本信息
  rpc GetStoreAppletVersionByMiniCategory(GetStoreAppletVersionByMiniCategoryReq) returns (GetStoreAppletVersionByMiniCategoryResp);

  //-----------------------店铺/商户图片数据表-----------------------
  rpc AddStoreImage(AddStoreImageReq) returns (AddStoreImageResp);
  rpc GetStoreImageById(GetStoreImageByIdReq) returns (GetStoreImageResp);
  rpc GetStoreImageList(GetStoreImageListReq) returns (GetStoreImageListResp);
  rpc GetStoreImageOne(GetStoreImageOneReq) returns (GetStoreImageResp);
  rpc DeleteStoreImage(DeleteStoreImageReq) returns (DeleteStoreImageResp);
  rpc UpdateStoreImage(UpdateStoreImageReq) returns (UpdateStoreImageResp);

  //-----------------------店铺结算配置表-----------------------
  rpc AddStoreSettle(AddStoreSettleReq) returns (StoreSettleResp);
  rpc UpdateStoreSettle(UpdateStoreSettleReq) returns (StoreSettleResp);
  rpc BulkStoreSettle(BulkStoreSettleReq) returns (BulkStoreSettleResp);
  rpc DelStoreSettle(DelStoreSettleReq) returns (StoreSettleResp);
  rpc GetStoreSettleById(GetStoreSettleByIdReq) returns (GetStoreSettleByIdResp);
  rpc GetStoreSettleByStoreId(GetStoreSettleByStoreIdReq) returns (GetStoreSettleByStoreIdResp);

  //-----------------------安心付入住-----------------------
  rpc AddStoreCommerce(AddStoreCommerceReq) returns (StoreCommerceResp);
  rpc UpdateStoreCommerce(UpdateStoreCommerceReq) returns (StoreCommerceResp);
  rpc GetStoreCommerceById(GetStoreCommerceByIdReq) returns (GetStoreCommerceResp);
  rpc GetStoreCommerceByOrderId(GetStoreCommerceByOrderIdReq) returns (GetStoreCommerceResp);
  rpc GetStoreCommerceByStoreId(GetStoreCommerceByStoreIdReq) returns (GetStoreCommerceResp);

  //-----------------------安心付佣金-----------------------
  rpc ListStoreCommerceCommission(ListStoreCommerceCommissionReq) returns (ListStoreCommerceCommissionResp);
  rpc AddStoreCommerceCommission(AddStoreCommerceCommissionReq) returns (StoreCommerceCommissionResp);
  rpc UpdateStoreCommerceCommission(UpdateStoreCommerceCommissionReq) returns (StoreCommerceCommissionResp);
  rpc GetStoreCommerceCommissionById(GetStoreCommerceCommissionByIdReq) returns (GetStoreCommerceCommissionResp);
  //-----------------------安心付多角色佣金-----------------------
  rpc ListStoreCommerceCommissionRole(ListStoreCommerceCommissionRoleReq) returns (ListStoreCommerceCommissionRoleResp);
  rpc AddStoreCommerceCommissionRole(AddStoreCommerceCommissionRoleReq) returns (StoreCommerceCommissionRoleResp);
  rpc UpdateStoreCommerceCommissionRole(UpdateStoreCommerceCommissionRoleReq) returns (StoreCommerceCommissionRoleResp);
  rpc GetStoreCommerceCommissionRoleById(GetStoreCommerceCommissionRoleByIdReq) returns (GetStoreCommerceCommissionRoleResp);

}

service UserService{

  //-----------------------账户-----------------------
  rpc LoginVerify(LoginVerifyReq) returns(LoginVerifyResp);
  rpc AdminLogin(LoginReq) returns (LoginResp);
  rpc AdminLoginV2(LoginReq) returns (LoginV2Resp);
  rpc AdminMoreLogin(MoreLoginReq) returns (LoginResp);
  rpc AdminRegister(RegisterReq) returns (RegisterResp);
  rpc StoreRegister(RegisterReq) returns (RegisterResp);
  rpc StoreUserRegister(RegisterReq) returns (RegisterResp);

  rpc AdminGenerateToken(GenerateTokenReq) returns (GenerateTokenResp);
  rpc AdminGenerateTokenV2(GenerateTokenReq) returns (GenerateTokenV2Resp);
  rpc AdminMoreGenerateToken(MoreGenerateTokenReq) returns (GenerateTokenResp);
  rpc AdminRefreshTokenV2(RefreshTokenReq) returns (RefreshTokenResp);

  rpc UserInfo(UserInfoReq) returns (UserInfoResp);
  rpc UserInfoV2(UserInfoReq) returns (UserInfoResp);
  rpc UserPassword(UserPasswordReq) returns (AddUserResp);
  rpc UserUpdate(UserUpdateReq) returns (AddUserResp);
  rpc UserUpdateIsMask(UserUpdateIsMaskReq) returns (AddUserResp);
  rpc UpdateReferralCode(UserUpdateReferralCodeReq) returns (AddUserResp);

  rpc UserGetById(GetUserByIdReq) returns (GetUserResp);
  rpc UserGetByPhone(GetUserByPhoneReq) returns (GetUserResp);
  rpc UserGetByUuid(GetUserByUuidReq) returns (GetUserResp);
  rpc UserGetByReferralCode(GetUserByReferralCodeReq) returns (GetUserResp);
  rpc UserGetByStoreId(GetUserByStoreIdUserTypeReq) returns (GetUserByAllResp);
  // 获取所有用户 - 被禁用的会被过滤
  rpc UserGetByAll(GetUserByAllReq) returns (GetUserByAllResp);
  rpc UserGetByUserIds(UserGetByUserIdsReq) returns (GetUserByAllResp);
  // 获取所有用户 - 获取全部没有过滤
  rpc UserGetByAllNoFilter(GetUserByAllReq) returns (GetUserByAllResp);


  //-----------------------登录日志-----------------------
  rpc AddUserLoginLog(AddAdminUserLoginLogReq) returns (AdminUserLoginLogResp);
}

service AuthService{

  //----------------------员工---------------------------------
  rpc StaffInfoList(StaffInfoListReq) returns (StaffInfoListResp);
  rpc StaffInfoGetByUid(StaffInfoGetByUidReq) returns (StaffInfoResp);
  rpc StaffInfoGetByUidAndStoreId(StaffInfoGetByUidAndStoreIdReq) returns (StaffInfoResp);

  //-----------------------系统权限-----------------------
  rpc ItemAdd(AddAuthItemReq) returns (AddAuthItemResp);
  rpc ItemList(ListAuthItemReq) returns (ListAuthItemResp);
  rpc ItemGetById(GetAuthItemByIdReq) returns (GetAuthItemByIdResp);

  //-----------------------系统menu-----------------------
  rpc MsMenuAdd(AddAuthMsMenuReq) returns (AuthMsMenuResp);
  rpc MsMenuUpdate(UpdateAuthMsMenuReq) returns (AuthMsMenuResp);
  rpc MsMenuList(ListAuthMsMenuReq) returns (ListAuthMsMenuResp);
  rpc MsMenuListByStoreId(ListAuthMsMenuReq) returns (ListAuthMsMenuResp);
  rpc MsMenuGetById(GetAuthMsMenuByIdReq) returns (GetAuthMsMenuByIdResp);
  rpc GetAuthMenuByIds(GetAuthMenuByIdsReq) returns (GetAuthMenuByIdsReps);

  rpc DeptAdd(AddAuthDeptReq) returns (AuthDeptResp);
  rpc DeptUpdate(UpdateAuthDeptReq) returns (AuthDeptResp);
  rpc DeptList(ListAuthDeptReq) returns (ListAuthDeptResp);
  rpc DeptGetById(GetAuthDeptByIdReq) returns (GetAuthDeptByIdResp);

  //---------------角色与菜单关系------------------

  //-------------------------用户关系-----------------------------
  rpc AuthUserList(AuthUserListReq) returns (AuthUserListResp);
  rpc AuthUserAllList(AuthUserListReq) returns (AuthUserListResp);
  rpc AuthUserAdd(AuthAddUserReq) returns (AuthAddUserResp);
  rpc AuthUserUpdate(AuthUpdateUserReq) returns (AuthAddUserResp);
  rpc AuthUserUpdateAncestors(AuthUpdateUserAncestorsReq) returns (AuthAddUserResp);

  //-----------------------角色v2-----------------------
  rpc AuthRoleAdd(AddAuthRoleReq) returns (AuthRoleResp);
  rpc AuthRoleUpdate(UpdateAuthRoleReq) returns (AuthRoleResp);
  rpc AuthRoleList(ListAuthRoleReq) returns (ListAuthRoleResp);
  rpc AuthRoleAll(AuthRoleAllReq) returns (ListAuthRoleResp);
  rpc GetAuthRoleById(GetAuthRoleByIdReq) returns (GetAuthRoleByIdResp);

  //-----------------------authRoleMenu-----------------------
  rpc AddAuthRoleMenu(AddAuthRoleMenuReq) returns (AuthRoleMenuResp);
  rpc BulkAddAuthRoleMenu(BulkAddAuthRoleMenuReq) returns (BulkAuthRoleMenuResp);
  rpc UpdateAuthRoleMenu(UpdateAuthRoleMenuReq) returns (AuthRoleMenuResp);
  rpc BulkUpdateAuthRoleMenu(BulkUpdateAuthRoleMenuReq) returns (BulkAuthRoleMenuResp);
  rpc ListAuthRoleMenu(ListAuthRoleMenuReq) returns (ListAuthRoleMenuResp);
  rpc GetAuthRoleMenuByRoleId(GetAuthRoleMenuByRoleIdReq) returns (ListAuthRoleMenuResp);
  rpc GetAuthRoleMenuByMenuId(GetAuthRoleMenuByMenuIdReq) returns (ListAuthRoleMenuResp);

  rpc GetAuthRoleMenuById(GetAuthRoleMenuByIdReq) returns (GetAuthRoleMenuResp);

  //-----------------------权限角色与员工关系-----------------------
  rpc AddAuthRoleUser(AddAuthRoleUserReq) returns (AuthRoleUserResp);
  rpc BulkAddAuthRoleUser(BulkAddAuthRoleUserReq) returns (BulkAuthRoleUserResp);
  rpc UpdateAuthRoleUser(UpdateAuthRoleUserReq) returns (AuthRoleUserResp);
  rpc BulkUpdateAuthRoleUser(BulkUpdateAuthRoleUserReq) returns (BulkAuthRoleUserResp);
  rpc ListAuthRoleUser(ListAuthRoleUserReq) returns (ListAuthRoleUserResp);
  rpc GetAuthRoleUserByUserid(GetAuthRoleUserByUserIdReq) returns (ListAuthRoleUserResp);

  rpc GetAuthRoleUserById(GetAuthRoleUserByIdReq) returns (GetAuthRoleUserResp);


  //------------user_store_map账户店铺一对多---------------
  rpc UserStoreMapGetById(UserStoreMapByIdReq) returns (UserStoreMapGetOneResp);
  rpc GetUserStoreMap(GetUserStoreMapReq) returns (UserStoreMapGetOneResp);
  rpc GetStoreByUserId(GetStoreByUserIdReq) returns (UserStoreMapResp);
  rpc GetUserByStoreId(GetUserByStoreIdReq) returns (UserStoreMapResp);
  rpc DeleteUserStoreMap(DeleteUserStoreMapReq) returns (DeleteUserStoreMapResp);
  // 查询所有的用户与店铺的数据
  rpc QueryAllUserStoreMap(QueryAllUserStoreMapReq) returns (QueryAllUserStoreMapResp);

  //-----------------------配置表-----------------------
  rpc AddSysConfig(AddSysConfigReq) returns (SysConfigResp);
  rpc BulkAddSysConfig(BulkAddSysConfigReq) returns (SysConfigResp);
  rpc UpdateSysConfig(UpdateSysConfigReq) returns (SysConfigResp);
  rpc BulkUpdateSysConfig(BulkUpdateSysConfigReq) returns (SysConfigResp);
  rpc ListSysConfig(ListSysConfigReq) returns (ListSysConfigResp);
  rpc GetSysConfigById(GetSysConfigByIdReq) returns (GetSysConfigResp);
  rpc GetOneSysConfig(GetOneSysConfigReq) returns (GetSysConfigResp);
  rpc GetSysConfigByModule(GetSysConfigByModuleReq) returns (ListSysConfigResp);
  rpc GetSysConfigByStoreId(GetSysConfigByStoreIdReq) returns (ListSysConfigResp);

  //-----------------------店铺通知-----------------------
  rpc AddSysNotice(AddSysNoticeReq) returns (SysNoticeResp);
  rpc UpdateSysNotice(UpdateSysNoticeReq) returns (SysNoticeResp);
  rpc GetSysNoticeById(GetSysNoticeByIdReq) returns (GetSysNoticeResp);
  rpc ListSysNotice(ListSysNoticeReq) returns (ListSysNoticeResp);

  //-----------------------系统分类表----------------------- 
  rpc AddSysCategory(AddSysCategoryReq) returns (SysCategoryResp);
  rpc UpdateSysCategory(UpdateSysCategoryReq) returns (SysCategoryResp);
  rpc GetSysCategoryById(GetSysCategoryByIdReq) returns (GetSysCategoryResp);
  rpc AllSysCategory(AllSysCategoryReq) returns (ListSysCategoryResp);
  rpc ListSysCategory(ListSysCategoryReq) returns (ListSysCategoryResp);

  //-----------------------系统缓存表-----------------------
  // 设置缓存key
  rpc SetSysCache(SetSysCacheReq) returns (SetSysCacheResp);
  // 移除缓存key【软删除】
  rpc RemoveSysCache(RemoveSysCacheReq) returns (RemoveSysCacheResp);
  // 查找缓存key
  rpc GetSysCache(GetSysCacheReq) returns (GetSysCacheResp);
  // 自增缓存key【前提是值必须是整数类型-否则会报错】
  rpc IncrSysCache(IncrSysCacheReq) returns (IncrSysCacheResp);
}

service StoreShopService {
  //-----------------------店铺门店-----------------------
  rpc AddStoreShop(AddStoreShopReq) returns (StoreShopResp);
  rpc UpdateStoreShop(UpdateStoreShopReq) returns (StoreShopResp);
  rpc AuditStoreShop(AuditStoreShopReq) returns (StoreShopResp);
  rpc UpdateStoreShopStatus(UpdateStoreShopStatusReq) returns (StoreShopResp);
  rpc UpdateStoreShopReceiptAccount(UpdateStoreShopReceiptAccountReq) returns (StoreShopResp);
  rpc UpdateStoreShopSettleType(UpdateStoreShopSettleTypeReq) returns (StoreShopResp);
  rpc ListStoreShop(ListStoreShopReq) returns (ListStoreShopResp);
  rpc GetStoreShopList(GetStoreShopListReq) returns (ListStoreShopResp);
  rpc GetStoreShopByStoreId(GetStoreShopByStoreIdReq) returns (ListStoreShopResp);
  rpc GetStoreShopByKeywords(GetStoreShopByKeywordsReq) returns (ListStoreShopResp);
  rpc GetStoreShopById(GetStoreShopByIdReq) returns (GetStoreShopInfoResp);
  rpc GetStoreShopByOrderId(GetStoreShopByOrderIdReq) returns (GetStoreShopInfoResp);
  rpc GetStoreShopByShopNo(GetStoreShopByShopNoReq) returns (GetStoreShopInfoResp);
  rpc GetStoreShopByAlipayStoreId(GetStoreShopByAlipayStoreIdReq) returns (GetStoreShopInfoResp);
  rpc GetStoreShopByReceiptAccount(GetStoreShopByReceiptAccountReq) returns (GetStoreShopInfoResp);
  // 查询所有有效门店【有shop_id且状态为PASS的门店】
  rpc QueryAllValidStoreShop(QueryAllValidStoreShopReq) returns (QueryAllValidStoreShopResp);

  //-----------------------商户门店地址表-----------------------
  rpc AddStoreShopAddress(AddStoreShopAddressReq) returns (StoreShopAddressResp);
  rpc UpdateStoreShopAddress(UpdateStoreShopAddressReq) returns (StoreShopAddressResp);
  rpc BulkAddStoreShopAddress(BulkAddStoreShopAddressReq) returns (StoreShopAddressResp);
  rpc ListStoreShopAddress(ListStoreShopAddressReq) returns (GetStoreShopAddressListResp);
  rpc AllStoreShopAddress(AllStoreShopAddressReq) returns(GetStoreShopAddressListResp);
  rpc GetStoreShopAddressById(GetStoreShopAddressByIdReq) returns (GetStoreShopAddressInfoResp);

  //-----------------------商户门店分类表-----------------------
  rpc AddStoreShopCategory(AddStoreShopCategoryReq) returns (StoreShopCategoryResp);
  rpc UpdateStoreShopCategory(UpdateStoreShopCategoryReq) returns (StoreShopCategoryResp);
  rpc BulkAddStoreShopCategory(BulkAddStoreShopCategoryReq) returns (StoreShopCategoryResp);
  rpc ListStoreShopCategory(ListStoreShopCategoryReq) returns (GetStoreShopCategoryListResp);
  rpc AllStoreShopCategory(AllStoreShopCategoryReq) returns (GetStoreShopCategoryListResp);
  rpc GetStoreShopCategoryById(GetStoreShopCategoryByIdReq) returns (GetStoreShopCategoryInfoResp);
}

service QrcodeService {
  //-----------------------qrcode表-----------------------
  rpc AddQrcode(AddQrcodeReq) returns (AddQrcodeResp);
  rpc UpdateQrcode(UpdateQrcodeReq) returns (UpdateQrcodeResp);
  rpc GetQrcodeById(GetQrcodeByIdReq) returns (GetQrcodeResp);
  rpc GetQrcodeBySn(GetQrcodeBySnReq) returns (GetQrcodeResp);
  rpc ListQrcode(ListQrcodeReq) returns (ListQrcodeResp);
}
